// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_DS_DC_ROW_INDEX_SEND.proto

#ifndef PROTOBUF_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto__INCLUDED
#define PROTOBUF_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
void protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
void protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();

class ROW_INDEX;
class TABLE_INDEX;
class MSG_DS_DC_ROW_INDEX_SEND;
class MSG_DC_DS_ROW_INDEX_SEND_ACK;

// ===================================================================

class ROW_INDEX : public ::google::protobuf::Message {
 public:
  ROW_INDEX();
  virtual ~ROW_INDEX();

  ROW_INDEX(const ROW_INDEX& from);

  inline ROW_INDEX& operator=(const ROW_INDEX& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROW_INDEX& default_instance();

  void Swap(ROW_INDEX* other);

  // implements Message ----------------------------------------------

  ROW_INDEX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROW_INDEX& from);
  void MergeFrom(const ROW_INDEX& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // required uint32 end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // required string csip = 3;
  inline bool has_csip() const;
  inline void clear_csip();
  static const int kCsipFieldNumber = 3;
  inline const ::std::string& csip() const;
  inline void set_csip(const ::std::string& value);
  inline void set_csip(const char* value);
  inline void set_csip(const char* value, size_t size);
  inline ::std::string* mutable_csip();
  inline ::std::string* release_csip();
  inline void set_allocated_csip(::std::string* csip);

  // @@protoc_insertion_point(class_scope:ROW_INDEX)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_csip();
  inline void clear_has_csip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  ::std::string* csip_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static ROW_INDEX* default_instance_;
};
// -------------------------------------------------------------------

class TABLE_INDEX : public ::google::protobuf::Message {
 public:
  TABLE_INDEX();
  virtual ~TABLE_INDEX();

  TABLE_INDEX(const TABLE_INDEX& from);

  inline TABLE_INDEX& operator=(const TABLE_INDEX& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TABLE_INDEX& default_instance();

  void Swap(TABLE_INDEX* other);

  // implements Message ----------------------------------------------

  TABLE_INDEX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TABLE_INDEX& from);
  void MergeFrom(const TABLE_INDEX& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string raip = 1;
  inline bool has_raip() const;
  inline void clear_raip();
  static const int kRaipFieldNumber = 1;
  inline const ::std::string& raip() const;
  inline void set_raip(const ::std::string& value);
  inline void set_raip(const char* value);
  inline void set_raip(const char* value, size_t size);
  inline ::std::string* mutable_raip();
  inline ::std::string* release_raip();
  inline void set_allocated_raip(::std::string* raip);

  // required int32 dbid = 2;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbidFieldNumber = 2;
  inline ::google::protobuf::int32 dbid() const;
  inline void set_dbid(::google::protobuf::int32 value);

  // required string tableName = 3;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 3;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // repeated .ROW_INDEX RowIndex = 4;
  inline int rowindex_size() const;
  inline void clear_rowindex();
  static const int kRowIndexFieldNumber = 4;
  inline const ::ROW_INDEX& rowindex(int index) const;
  inline ::ROW_INDEX* mutable_rowindex(int index);
  inline ::ROW_INDEX* add_rowindex();
  inline const ::google::protobuf::RepeatedPtrField< ::ROW_INDEX >&
      rowindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::ROW_INDEX >*
      mutable_rowindex();

  // @@protoc_insertion_point(class_scope:TABLE_INDEX)
 private:
  inline void set_has_raip();
  inline void clear_has_raip();
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_tablename();
  inline void clear_has_tablename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* raip_;
  ::std::string* tablename_;
  ::google::protobuf::RepeatedPtrField< ::ROW_INDEX > rowindex_;
  ::google::protobuf::int32 dbid_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static TABLE_INDEX* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DS_DC_ROW_INDEX_SEND : public ::google::protobuf::Message {
 public:
  MSG_DS_DC_ROW_INDEX_SEND();
  virtual ~MSG_DS_DC_ROW_INDEX_SEND();

  MSG_DS_DC_ROW_INDEX_SEND(const MSG_DS_DC_ROW_INDEX_SEND& from);

  inline MSG_DS_DC_ROW_INDEX_SEND& operator=(const MSG_DS_DC_ROW_INDEX_SEND& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DS_DC_ROW_INDEX_SEND& default_instance();

  void Swap(MSG_DS_DC_ROW_INDEX_SEND* other);

  // implements Message ----------------------------------------------

  MSG_DS_DC_ROW_INDEX_SEND* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DS_DC_ROW_INDEX_SEND& from);
  void MergeFrom(const MSG_DS_DC_ROW_INDEX_SEND& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 loadTaskID = 2;
  inline bool has_loadtaskid() const;
  inline void clear_loadtaskid();
  static const int kLoadTaskIDFieldNumber = 2;
  inline ::google::protobuf::uint32 loadtaskid() const;
  inline void set_loadtaskid(::google::protobuf::uint32 value);

  // repeated .TABLE_INDEX TableIndex = 3;
  inline int tableindex_size() const;
  inline void clear_tableindex();
  static const int kTableIndexFieldNumber = 3;
  inline const ::TABLE_INDEX& tableindex(int index) const;
  inline ::TABLE_INDEX* mutable_tableindex(int index);
  inline ::TABLE_INDEX* add_tableindex();
  inline const ::google::protobuf::RepeatedPtrField< ::TABLE_INDEX >&
      tableindex() const;
  inline ::google::protobuf::RepeatedPtrField< ::TABLE_INDEX >*
      mutable_tableindex();

  // @@protoc_insertion_point(class_scope:MSG_DS_DC_ROW_INDEX_SEND)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_loadtaskid();
  inline void clear_has_loadtaskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 loadtaskid_;
  ::google::protobuf::RepeatedPtrField< ::TABLE_INDEX > tableindex_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static MSG_DS_DC_ROW_INDEX_SEND* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DC_DS_ROW_INDEX_SEND_ACK : public ::google::protobuf::Message {
 public:
  MSG_DC_DS_ROW_INDEX_SEND_ACK();
  virtual ~MSG_DC_DS_ROW_INDEX_SEND_ACK();

  MSG_DC_DS_ROW_INDEX_SEND_ACK(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from);

  inline MSG_DC_DS_ROW_INDEX_SEND_ACK& operator=(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DC_DS_ROW_INDEX_SEND_ACK& default_instance();

  void Swap(MSG_DC_DS_ROW_INDEX_SEND_ACK* other);

  // implements Message ----------------------------------------------

  MSG_DC_DS_ROW_INDEX_SEND_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from);
  void MergeFrom(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 loadTaskID = 2;
  inline bool has_loadtaskid() const;
  inline void clear_loadtaskid();
  static const int kLoadTaskIDFieldNumber = 2;
  inline ::google::protobuf::uint32 loadtaskid() const;
  inline void set_loadtaskid(::google::protobuf::uint32 value);

  // required int32 statusCode = 3;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 3;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MSG_DC_DS_ROW_INDEX_SEND_ACK)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_loadtaskid();
  inline void clear_has_loadtaskid();
  inline void set_has_statuscode();
  inline void clear_has_statuscode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 loadtaskid_;
  ::google::protobuf::int32 statuscode_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static MSG_DC_DS_ROW_INDEX_SEND_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// ROW_INDEX

// required uint32 start = 1;
inline bool ROW_INDEX::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROW_INDEX::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROW_INDEX::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROW_INDEX::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 ROW_INDEX::start() const {
  // @@protoc_insertion_point(field_get:ROW_INDEX.start)
  return start_;
}
inline void ROW_INDEX::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:ROW_INDEX.start)
}

// required uint32 end = 2;
inline bool ROW_INDEX::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROW_INDEX::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROW_INDEX::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROW_INDEX::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 ROW_INDEX::end() const {
  // @@protoc_insertion_point(field_get:ROW_INDEX.end)
  return end_;
}
inline void ROW_INDEX::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:ROW_INDEX.end)
}

// required string csip = 3;
inline bool ROW_INDEX::has_csip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROW_INDEX::set_has_csip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROW_INDEX::clear_has_csip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROW_INDEX::clear_csip() {
  if (csip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_->clear();
  }
  clear_has_csip();
}
inline const ::std::string& ROW_INDEX::csip() const {
  // @@protoc_insertion_point(field_get:ROW_INDEX.csip)
  return *csip_;
}
inline void ROW_INDEX::set_csip(const ::std::string& value) {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  csip_->assign(value);
  // @@protoc_insertion_point(field_set:ROW_INDEX.csip)
}
inline void ROW_INDEX::set_csip(const char* value) {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  csip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ROW_INDEX.csip)
}
inline void ROW_INDEX::set_csip(const char* value, size_t size) {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  csip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ROW_INDEX.csip)
}
inline ::std::string* ROW_INDEX::mutable_csip() {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ROW_INDEX.csip)
  return csip_;
}
inline ::std::string* ROW_INDEX::release_csip() {
  clear_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = csip_;
    csip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ROW_INDEX::set_allocated_csip(::std::string* csip) {
  if (csip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csip_;
  }
  if (csip) {
    set_has_csip();
    csip_ = csip;
  } else {
    clear_has_csip();
    csip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ROW_INDEX.csip)
}

// -------------------------------------------------------------------

// TABLE_INDEX

// required string raip = 1;
inline bool TABLE_INDEX::has_raip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TABLE_INDEX::set_has_raip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TABLE_INDEX::clear_has_raip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TABLE_INDEX::clear_raip() {
  if (raip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raip_->clear();
  }
  clear_has_raip();
}
inline const ::std::string& TABLE_INDEX::raip() const {
  // @@protoc_insertion_point(field_get:TABLE_INDEX.raip)
  return *raip_;
}
inline void TABLE_INDEX::set_raip(const ::std::string& value) {
  set_has_raip();
  if (raip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raip_ = new ::std::string;
  }
  raip_->assign(value);
  // @@protoc_insertion_point(field_set:TABLE_INDEX.raip)
}
inline void TABLE_INDEX::set_raip(const char* value) {
  set_has_raip();
  if (raip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raip_ = new ::std::string;
  }
  raip_->assign(value);
  // @@protoc_insertion_point(field_set_char:TABLE_INDEX.raip)
}
inline void TABLE_INDEX::set_raip(const char* value, size_t size) {
  set_has_raip();
  if (raip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raip_ = new ::std::string;
  }
  raip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TABLE_INDEX.raip)
}
inline ::std::string* TABLE_INDEX::mutable_raip() {
  set_has_raip();
  if (raip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TABLE_INDEX.raip)
  return raip_;
}
inline ::std::string* TABLE_INDEX::release_raip() {
  clear_has_raip();
  if (raip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = raip_;
    raip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TABLE_INDEX::set_allocated_raip(::std::string* raip) {
  if (raip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raip_;
  }
  if (raip) {
    set_has_raip();
    raip_ = raip;
  } else {
    clear_has_raip();
    raip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TABLE_INDEX.raip)
}

// required int32 dbid = 2;
inline bool TABLE_INDEX::has_dbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TABLE_INDEX::set_has_dbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TABLE_INDEX::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TABLE_INDEX::clear_dbid() {
  dbid_ = 0;
  clear_has_dbid();
}
inline ::google::protobuf::int32 TABLE_INDEX::dbid() const {
  // @@protoc_insertion_point(field_get:TABLE_INDEX.dbid)
  return dbid_;
}
inline void TABLE_INDEX::set_dbid(::google::protobuf::int32 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:TABLE_INDEX.dbid)
}

// required string tableName = 3;
inline bool TABLE_INDEX::has_tablename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TABLE_INDEX::set_has_tablename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TABLE_INDEX::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TABLE_INDEX::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& TABLE_INDEX::tablename() const {
  // @@protoc_insertion_point(field_get:TABLE_INDEX.tableName)
  return *tablename_;
}
inline void TABLE_INDEX::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:TABLE_INDEX.tableName)
}
inline void TABLE_INDEX::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:TABLE_INDEX.tableName)
}
inline void TABLE_INDEX::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TABLE_INDEX.tableName)
}
inline ::std::string* TABLE_INDEX::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TABLE_INDEX.tableName)
  return tablename_;
}
inline ::std::string* TABLE_INDEX::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TABLE_INDEX::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TABLE_INDEX.tableName)
}

// repeated .ROW_INDEX RowIndex = 4;
inline int TABLE_INDEX::rowindex_size() const {
  return rowindex_.size();
}
inline void TABLE_INDEX::clear_rowindex() {
  rowindex_.Clear();
}
inline const ::ROW_INDEX& TABLE_INDEX::rowindex(int index) const {
  // @@protoc_insertion_point(field_get:TABLE_INDEX.RowIndex)
  return rowindex_.Get(index);
}
inline ::ROW_INDEX* TABLE_INDEX::mutable_rowindex(int index) {
  // @@protoc_insertion_point(field_mutable:TABLE_INDEX.RowIndex)
  return rowindex_.Mutable(index);
}
inline ::ROW_INDEX* TABLE_INDEX::add_rowindex() {
  // @@protoc_insertion_point(field_add:TABLE_INDEX.RowIndex)
  return rowindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ROW_INDEX >&
TABLE_INDEX::rowindex() const {
  // @@protoc_insertion_point(field_list:TABLE_INDEX.RowIndex)
  return rowindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::ROW_INDEX >*
TABLE_INDEX::mutable_rowindex() {
  // @@protoc_insertion_point(field_mutable_list:TABLE_INDEX.RowIndex)
  return &rowindex_;
}

// -------------------------------------------------------------------

// MSG_DS_DC_ROW_INDEX_SEND

// required uint32 taskID = 1;
inline bool MSG_DS_DC_ROW_INDEX_SEND::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_DS_DC_ROW_INDEX_SEND::taskid() const {
  // @@protoc_insertion_point(field_get:MSG_DS_DC_ROW_INDEX_SEND.taskID)
  return taskid_;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_DS_DC_ROW_INDEX_SEND.taskID)
}

// required uint32 loadTaskID = 2;
inline bool MSG_DS_DC_ROW_INDEX_SEND::has_loadtaskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::set_has_loadtaskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::clear_has_loadtaskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::clear_loadtaskid() {
  loadtaskid_ = 0u;
  clear_has_loadtaskid();
}
inline ::google::protobuf::uint32 MSG_DS_DC_ROW_INDEX_SEND::loadtaskid() const {
  // @@protoc_insertion_point(field_get:MSG_DS_DC_ROW_INDEX_SEND.loadTaskID)
  return loadtaskid_;
}
inline void MSG_DS_DC_ROW_INDEX_SEND::set_loadtaskid(::google::protobuf::uint32 value) {
  set_has_loadtaskid();
  loadtaskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_DS_DC_ROW_INDEX_SEND.loadTaskID)
}

// repeated .TABLE_INDEX TableIndex = 3;
inline int MSG_DS_DC_ROW_INDEX_SEND::tableindex_size() const {
  return tableindex_.size();
}
inline void MSG_DS_DC_ROW_INDEX_SEND::clear_tableindex() {
  tableindex_.Clear();
}
inline const ::TABLE_INDEX& MSG_DS_DC_ROW_INDEX_SEND::tableindex(int index) const {
  // @@protoc_insertion_point(field_get:MSG_DS_DC_ROW_INDEX_SEND.TableIndex)
  return tableindex_.Get(index);
}
inline ::TABLE_INDEX* MSG_DS_DC_ROW_INDEX_SEND::mutable_tableindex(int index) {
  // @@protoc_insertion_point(field_mutable:MSG_DS_DC_ROW_INDEX_SEND.TableIndex)
  return tableindex_.Mutable(index);
}
inline ::TABLE_INDEX* MSG_DS_DC_ROW_INDEX_SEND::add_tableindex() {
  // @@protoc_insertion_point(field_add:MSG_DS_DC_ROW_INDEX_SEND.TableIndex)
  return tableindex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TABLE_INDEX >&
MSG_DS_DC_ROW_INDEX_SEND::tableindex() const {
  // @@protoc_insertion_point(field_list:MSG_DS_DC_ROW_INDEX_SEND.TableIndex)
  return tableindex_;
}
inline ::google::protobuf::RepeatedPtrField< ::TABLE_INDEX >*
MSG_DS_DC_ROW_INDEX_SEND::mutable_tableindex() {
  // @@protoc_insertion_point(field_mutable_list:MSG_DS_DC_ROW_INDEX_SEND.TableIndex)
  return &tableindex_;
}

// -------------------------------------------------------------------

// MSG_DC_DS_ROW_INDEX_SEND_ACK

// required uint32 taskID = 1;
inline bool MSG_DC_DS_ROW_INDEX_SEND_ACK::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_DC_DS_ROW_INDEX_SEND_ACK::taskid() const {
  // @@protoc_insertion_point(field_get:MSG_DC_DS_ROW_INDEX_SEND_ACK.taskID)
  return taskid_;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_DC_DS_ROW_INDEX_SEND_ACK.taskID)
}

// required uint32 loadTaskID = 2;
inline bool MSG_DC_DS_ROW_INDEX_SEND_ACK::has_loadtaskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::set_has_loadtaskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::clear_has_loadtaskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::clear_loadtaskid() {
  loadtaskid_ = 0u;
  clear_has_loadtaskid();
}
inline ::google::protobuf::uint32 MSG_DC_DS_ROW_INDEX_SEND_ACK::loadtaskid() const {
  // @@protoc_insertion_point(field_get:MSG_DC_DS_ROW_INDEX_SEND_ACK.loadTaskID)
  return loadtaskid_;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::set_loadtaskid(::google::protobuf::uint32 value) {
  set_has_loadtaskid();
  loadtaskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_DC_DS_ROW_INDEX_SEND_ACK.loadTaskID)
}

// required int32 statusCode = 3;
inline bool MSG_DC_DS_ROW_INDEX_SEND_ACK::has_statuscode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::set_has_statuscode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 MSG_DC_DS_ROW_INDEX_SEND_ACK::statuscode() const {
  // @@protoc_insertion_point(field_get:MSG_DC_DS_ROW_INDEX_SEND_ACK.statusCode)
  return statuscode_;
}
inline void MSG_DC_DS_ROW_INDEX_SEND_ACK::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:MSG_DC_DS_ROW_INDEX_SEND_ACK.statusCode)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto__INCLUDED
