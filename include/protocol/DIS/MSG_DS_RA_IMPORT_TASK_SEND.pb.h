// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_DS_RA_IMPORT_TASK_SEND.proto

#ifndef PROTOBUF_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto__INCLUDED
#define PROTOBUF_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

class IMP_TAB_INFO;
class IMP_DB_INFO;
class MSG_DS_RA_IMPORT_TASK_SEND;
class MSG_RA_DS_IMPORT_ERROR_INFO_ACK;
class COL_VALUE;
class COL_DATA;
class MSG_RA_DS_IMPORT_TASK_ACK;

enum COL_DATA_COLUMN_TYPE {
  COL_DATA_COLUMN_TYPE_STRING = 0,
  COL_DATA_COLUMN_TYPE_INT = 1,
  COL_DATA_COLUMN_TYPE_FLOAT = 2,
  COL_DATA_COLUMN_TYPE_DOUBLE = 3
};
bool COL_DATA_COLUMN_TYPE_IsValid(int value);
const COL_DATA_COLUMN_TYPE COL_DATA_COLUMN_TYPE_COLUMN_TYPE_MIN = COL_DATA_COLUMN_TYPE_STRING;
const COL_DATA_COLUMN_TYPE COL_DATA_COLUMN_TYPE_COLUMN_TYPE_MAX = COL_DATA_COLUMN_TYPE_DOUBLE;
const int COL_DATA_COLUMN_TYPE_COLUMN_TYPE_ARRAYSIZE = COL_DATA_COLUMN_TYPE_COLUMN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* COL_DATA_COLUMN_TYPE_descriptor();
inline const ::std::string& COL_DATA_COLUMN_TYPE_Name(COL_DATA_COLUMN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    COL_DATA_COLUMN_TYPE_descriptor(), value);
}
inline bool COL_DATA_COLUMN_TYPE_Parse(
    const ::std::string& name, COL_DATA_COLUMN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<COL_DATA_COLUMN_TYPE>(
    COL_DATA_COLUMN_TYPE_descriptor(), name, value);
}
// ===================================================================

class IMP_TAB_INFO : public ::google::protobuf::Message {
 public:
  IMP_TAB_INFO();
  virtual ~IMP_TAB_INFO();

  IMP_TAB_INFO(const IMP_TAB_INFO& from);

  inline IMP_TAB_INFO& operator=(const IMP_TAB_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMP_TAB_INFO& default_instance();

  void Swap(IMP_TAB_INFO* other);

  // implements Message ----------------------------------------------

  IMP_TAB_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMP_TAB_INFO& from);
  void MergeFrom(const IMP_TAB_INFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tableName = 1;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // repeated string colName = 2;
  inline int colname_size() const;
  inline void clear_colname();
  static const int kColNameFieldNumber = 2;
  inline const ::std::string& colname(int index) const;
  inline ::std::string* mutable_colname(int index);
  inline void set_colname(int index, const ::std::string& value);
  inline void set_colname(int index, const char* value);
  inline void set_colname(int index, const char* value, size_t size);
  inline ::std::string* add_colname();
  inline void add_colname(const ::std::string& value);
  inline void add_colname(const char* value);
  inline void add_colname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& colname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_colname();

  // optional uint32 rowKeyMax = 3;
  inline bool has_rowkeymax() const;
  inline void clear_rowkeymax();
  static const int kRowKeyMaxFieldNumber = 3;
  inline ::google::protobuf::uint32 rowkeymax() const;
  inline void set_rowkeymax(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IMP_TAB_INFO)
 private:
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_rowkeymax();
  inline void clear_has_rowkeymax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> colname_;
  ::google::protobuf::uint32 rowkeymax_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static IMP_TAB_INFO* default_instance_;
};
// -------------------------------------------------------------------

class IMP_DB_INFO : public ::google::protobuf::Message {
 public:
  IMP_DB_INFO();
  virtual ~IMP_DB_INFO();

  IMP_DB_INFO(const IMP_DB_INFO& from);

  inline IMP_DB_INFO& operator=(const IMP_DB_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMP_DB_INFO& default_instance();

  void Swap(IMP_DB_INFO* other);

  // implements Message ----------------------------------------------

  IMP_DB_INFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IMP_DB_INFO& from);
  void MergeFrom(const IMP_DB_INFO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dbID = 1;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dbid() const;
  inline void set_dbid(::google::protobuf::uint32 value);

  // repeated .IMP_TAB_INFO tableInfo = 2;
  inline int tableinfo_size() const;
  inline void clear_tableinfo();
  static const int kTableInfoFieldNumber = 2;
  inline const ::IMP_TAB_INFO& tableinfo(int index) const;
  inline ::IMP_TAB_INFO* mutable_tableinfo(int index);
  inline ::IMP_TAB_INFO* add_tableinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::IMP_TAB_INFO >&
      tableinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::IMP_TAB_INFO >*
      mutable_tableinfo();

  // @@protoc_insertion_point(class_scope:IMP_DB_INFO)
 private:
  inline void set_has_dbid();
  inline void clear_has_dbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IMP_TAB_INFO > tableinfo_;
  ::google::protobuf::uint32 dbid_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static IMP_DB_INFO* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DS_RA_IMPORT_TASK_SEND : public ::google::protobuf::Message {
 public:
  MSG_DS_RA_IMPORT_TASK_SEND();
  virtual ~MSG_DS_RA_IMPORT_TASK_SEND();

  MSG_DS_RA_IMPORT_TASK_SEND(const MSG_DS_RA_IMPORT_TASK_SEND& from);

  inline MSG_DS_RA_IMPORT_TASK_SEND& operator=(const MSG_DS_RA_IMPORT_TASK_SEND& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DS_RA_IMPORT_TASK_SEND& default_instance();

  void Swap(MSG_DS_RA_IMPORT_TASK_SEND* other);

  // implements Message ----------------------------------------------

  MSG_DS_RA_IMPORT_TASK_SEND* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DS_RA_IMPORT_TASK_SEND& from);
  void MergeFrom(const MSG_DS_RA_IMPORT_TASK_SEND& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // repeated .IMP_DB_INFO dbInfo = 2;
  inline int dbinfo_size() const;
  inline void clear_dbinfo();
  static const int kDbInfoFieldNumber = 2;
  inline const ::IMP_DB_INFO& dbinfo(int index) const;
  inline ::IMP_DB_INFO* mutable_dbinfo(int index);
  inline ::IMP_DB_INFO* add_dbinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::IMP_DB_INFO >&
      dbinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::IMP_DB_INFO >*
      mutable_dbinfo();

  // @@protoc_insertion_point(class_scope:MSG_DS_RA_IMPORT_TASK_SEND)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IMP_DB_INFO > dbinfo_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static MSG_DS_RA_IMPORT_TASK_SEND* default_instance_;
};
// -------------------------------------------------------------------

class MSG_RA_DS_IMPORT_ERROR_INFO_ACK : public ::google::protobuf::Message {
 public:
  MSG_RA_DS_IMPORT_ERROR_INFO_ACK();
  virtual ~MSG_RA_DS_IMPORT_ERROR_INFO_ACK();

  MSG_RA_DS_IMPORT_ERROR_INFO_ACK(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from);

  inline MSG_RA_DS_IMPORT_ERROR_INFO_ACK& operator=(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& default_instance();

  void Swap(MSG_RA_DS_IMPORT_ERROR_INFO_ACK* other);

  // implements Message ----------------------------------------------

  MSG_RA_DS_IMPORT_ERROR_INFO_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from);
  void MergeFrom(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required int32 statusCode = 2;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 2;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // required string statusMsg = 3;
  inline bool has_statusmsg() const;
  inline void clear_statusmsg();
  static const int kStatusMsgFieldNumber = 3;
  inline const ::std::string& statusmsg() const;
  inline void set_statusmsg(const ::std::string& value);
  inline void set_statusmsg(const char* value);
  inline void set_statusmsg(const char* value, size_t size);
  inline ::std::string* mutable_statusmsg();
  inline ::std::string* release_statusmsg();
  inline void set_allocated_statusmsg(::std::string* statusmsg);

  // @@protoc_insertion_point(class_scope:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_statuscode();
  inline void clear_has_statuscode();
  inline void set_has_statusmsg();
  inline void clear_has_statusmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::int32 statuscode_;
  ::std::string* statusmsg_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static MSG_RA_DS_IMPORT_ERROR_INFO_ACK* default_instance_;
};
// -------------------------------------------------------------------

class COL_VALUE : public ::google::protobuf::Message {
 public:
  COL_VALUE();
  virtual ~COL_VALUE();

  COL_VALUE(const COL_VALUE& from);

  inline COL_VALUE& operator=(const COL_VALUE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const COL_VALUE& default_instance();

  void Swap(COL_VALUE* other);

  // implements Message ----------------------------------------------

  COL_VALUE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const COL_VALUE& from);
  void MergeFrom(const COL_VALUE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strValue = 1;
  inline bool has_strvalue() const;
  inline void clear_strvalue();
  static const int kStrValueFieldNumber = 1;
  inline const ::std::string& strvalue() const;
  inline void set_strvalue(const ::std::string& value);
  inline void set_strvalue(const char* value);
  inline void set_strvalue(const char* value, size_t size);
  inline ::std::string* mutable_strvalue();
  inline ::std::string* release_strvalue();
  inline void set_allocated_strvalue(::std::string* strvalue);

  // optional int64 iValue = 2;
  inline bool has_ivalue() const;
  inline void clear_ivalue();
  static const int kIValueFieldNumber = 2;
  inline ::google::protobuf::int64 ivalue() const;
  inline void set_ivalue(::google::protobuf::int64 value);

  // optional float fValue = 3;
  inline bool has_fvalue() const;
  inline void clear_fvalue();
  static const int kFValueFieldNumber = 3;
  inline float fvalue() const;
  inline void set_fvalue(float value);

  // optional double dValue = 4;
  inline bool has_dvalue() const;
  inline void clear_dvalue();
  static const int kDValueFieldNumber = 4;
  inline double dvalue() const;
  inline void set_dvalue(double value);

  // required uint64 rowNo = 5;
  inline bool has_rowno() const;
  inline void clear_rowno();
  static const int kRowNoFieldNumber = 5;
  inline ::google::protobuf::uint64 rowno() const;
  inline void set_rowno(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:COL_VALUE)
 private:
  inline void set_has_strvalue();
  inline void clear_has_strvalue();
  inline void set_has_ivalue();
  inline void clear_has_ivalue();
  inline void set_has_fvalue();
  inline void clear_has_fvalue();
  inline void set_has_dvalue();
  inline void clear_has_dvalue();
  inline void set_has_rowno();
  inline void clear_has_rowno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strvalue_;
  ::google::protobuf::int64 ivalue_;
  double dvalue_;
  ::google::protobuf::uint64 rowno_;
  float fvalue_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static COL_VALUE* default_instance_;
};
// -------------------------------------------------------------------

class COL_DATA : public ::google::protobuf::Message {
 public:
  COL_DATA();
  virtual ~COL_DATA();

  COL_DATA(const COL_DATA& from);

  inline COL_DATA& operator=(const COL_DATA& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const COL_DATA& default_instance();

  void Swap(COL_DATA* other);

  // implements Message ----------------------------------------------

  COL_DATA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const COL_DATA& from);
  void MergeFrom(const COL_DATA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef COL_DATA_COLUMN_TYPE COLUMN_TYPE;
  static const COLUMN_TYPE STRING = COL_DATA_COLUMN_TYPE_STRING;
  static const COLUMN_TYPE INT = COL_DATA_COLUMN_TYPE_INT;
  static const COLUMN_TYPE FLOAT = COL_DATA_COLUMN_TYPE_FLOAT;
  static const COLUMN_TYPE DOUBLE = COL_DATA_COLUMN_TYPE_DOUBLE;
  static inline bool COLUMN_TYPE_IsValid(int value) {
    return COL_DATA_COLUMN_TYPE_IsValid(value);
  }
  static const COLUMN_TYPE COLUMN_TYPE_MIN =
    COL_DATA_COLUMN_TYPE_COLUMN_TYPE_MIN;
  static const COLUMN_TYPE COLUMN_TYPE_MAX =
    COL_DATA_COLUMN_TYPE_COLUMN_TYPE_MAX;
  static const int COLUMN_TYPE_ARRAYSIZE =
    COL_DATA_COLUMN_TYPE_COLUMN_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  COLUMN_TYPE_descriptor() {
    return COL_DATA_COLUMN_TYPE_descriptor();
  }
  static inline const ::std::string& COLUMN_TYPE_Name(COLUMN_TYPE value) {
    return COL_DATA_COLUMN_TYPE_Name(value);
  }
  static inline bool COLUMN_TYPE_Parse(const ::std::string& name,
      COLUMN_TYPE* value) {
    return COL_DATA_COLUMN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string colName = 1;
  inline bool has_colname() const;
  inline void clear_colname();
  static const int kColNameFieldNumber = 1;
  inline const ::std::string& colname() const;
  inline void set_colname(const ::std::string& value);
  inline void set_colname(const char* value);
  inline void set_colname(const char* value, size_t size);
  inline ::std::string* mutable_colname();
  inline ::std::string* release_colname();
  inline void set_allocated_colname(::std::string* colname);

  // required .COL_DATA.COLUMN_TYPE colType = 2 [default = STRING];
  inline bool has_coltype() const;
  inline void clear_coltype();
  static const int kColTypeFieldNumber = 2;
  inline ::COL_DATA_COLUMN_TYPE coltype() const;
  inline void set_coltype(::COL_DATA_COLUMN_TYPE value);

  // repeated .COL_VALUE colValue = 3;
  inline int colvalue_size() const;
  inline void clear_colvalue();
  static const int kColValueFieldNumber = 3;
  inline const ::COL_VALUE& colvalue(int index) const;
  inline ::COL_VALUE* mutable_colvalue(int index);
  inline ::COL_VALUE* add_colvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::COL_VALUE >&
      colvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::COL_VALUE >*
      mutable_colvalue();

  // @@protoc_insertion_point(class_scope:COL_DATA)
 private:
  inline void set_has_colname();
  inline void clear_has_colname();
  inline void set_has_coltype();
  inline void clear_has_coltype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* colname_;
  ::google::protobuf::RepeatedPtrField< ::COL_VALUE > colvalue_;
  int coltype_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static COL_DATA* default_instance_;
};
// -------------------------------------------------------------------

class MSG_RA_DS_IMPORT_TASK_ACK : public ::google::protobuf::Message {
 public:
  MSG_RA_DS_IMPORT_TASK_ACK();
  virtual ~MSG_RA_DS_IMPORT_TASK_ACK();

  MSG_RA_DS_IMPORT_TASK_ACK(const MSG_RA_DS_IMPORT_TASK_ACK& from);

  inline MSG_RA_DS_IMPORT_TASK_ACK& operator=(const MSG_RA_DS_IMPORT_TASK_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_RA_DS_IMPORT_TASK_ACK& default_instance();

  void Swap(MSG_RA_DS_IMPORT_TASK_ACK* other);

  // implements Message ----------------------------------------------

  MSG_RA_DS_IMPORT_TASK_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_RA_DS_IMPORT_TASK_ACK& from);
  void MergeFrom(const MSG_RA_DS_IMPORT_TASK_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 dbID = 2;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbIDFieldNumber = 2;
  inline ::google::protobuf::uint32 dbid() const;
  inline void set_dbid(::google::protobuf::uint32 value);

  // required string tableName = 3;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 3;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // required uint32 subTaskNo = 4;
  inline bool has_subtaskno() const;
  inline void clear_subtaskno();
  static const int kSubTaskNoFieldNumber = 4;
  inline ::google::protobuf::uint32 subtaskno() const;
  inline void set_subtaskno(::google::protobuf::uint32 value);

  // required uint32 subTaskNum = 5;
  inline bool has_subtasknum() const;
  inline void clear_subtasknum();
  static const int kSubTaskNumFieldNumber = 5;
  inline ::google::protobuf::uint32 subtasknum() const;
  inline void set_subtasknum(::google::protobuf::uint32 value);

  // repeated .COL_DATA colValue = 6;
  inline int colvalue_size() const;
  inline void clear_colvalue();
  static const int kColValueFieldNumber = 6;
  inline const ::COL_DATA& colvalue(int index) const;
  inline ::COL_DATA* mutable_colvalue(int index);
  inline ::COL_DATA* add_colvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::COL_DATA >&
      colvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::COL_DATA >*
      mutable_colvalue();

  // @@protoc_insertion_point(class_scope:MSG_RA_DS_IMPORT_TASK_ACK)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_subtaskno();
  inline void clear_has_subtaskno();
  inline void set_has_subtasknum();
  inline void clear_has_subtasknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 dbid_;
  ::std::string* tablename_;
  ::google::protobuf::uint32 subtaskno_;
  ::google::protobuf::uint32 subtasknum_;
  ::google::protobuf::RepeatedPtrField< ::COL_DATA > colvalue_;
  friend void  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();

  void InitAsDefaultInstance();
  static MSG_RA_DS_IMPORT_TASK_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// IMP_TAB_INFO

// required string tableName = 1;
inline bool IMP_TAB_INFO::has_tablename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMP_TAB_INFO::set_has_tablename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMP_TAB_INFO::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMP_TAB_INFO::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& IMP_TAB_INFO::tablename() const {
  // @@protoc_insertion_point(field_get:IMP_TAB_INFO.tableName)
  return *tablename_;
}
inline void IMP_TAB_INFO::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:IMP_TAB_INFO.tableName)
}
inline void IMP_TAB_INFO::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:IMP_TAB_INFO.tableName)
}
inline void IMP_TAB_INFO::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IMP_TAB_INFO.tableName)
}
inline ::std::string* IMP_TAB_INFO::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IMP_TAB_INFO.tableName)
  return tablename_;
}
inline ::std::string* IMP_TAB_INFO::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMP_TAB_INFO::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IMP_TAB_INFO.tableName)
}

// repeated string colName = 2;
inline int IMP_TAB_INFO::colname_size() const {
  return colname_.size();
}
inline void IMP_TAB_INFO::clear_colname() {
  colname_.Clear();
}
inline const ::std::string& IMP_TAB_INFO::colname(int index) const {
  // @@protoc_insertion_point(field_get:IMP_TAB_INFO.colName)
  return colname_.Get(index);
}
inline ::std::string* IMP_TAB_INFO::mutable_colname(int index) {
  // @@protoc_insertion_point(field_mutable:IMP_TAB_INFO.colName)
  return colname_.Mutable(index);
}
inline void IMP_TAB_INFO::set_colname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IMP_TAB_INFO.colName)
  colname_.Mutable(index)->assign(value);
}
inline void IMP_TAB_INFO::set_colname(int index, const char* value) {
  colname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IMP_TAB_INFO.colName)
}
inline void IMP_TAB_INFO::set_colname(int index, const char* value, size_t size) {
  colname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IMP_TAB_INFO.colName)
}
inline ::std::string* IMP_TAB_INFO::add_colname() {
  return colname_.Add();
}
inline void IMP_TAB_INFO::add_colname(const ::std::string& value) {
  colname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IMP_TAB_INFO.colName)
}
inline void IMP_TAB_INFO::add_colname(const char* value) {
  colname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IMP_TAB_INFO.colName)
}
inline void IMP_TAB_INFO::add_colname(const char* value, size_t size) {
  colname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IMP_TAB_INFO.colName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IMP_TAB_INFO::colname() const {
  // @@protoc_insertion_point(field_list:IMP_TAB_INFO.colName)
  return colname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IMP_TAB_INFO::mutable_colname() {
  // @@protoc_insertion_point(field_mutable_list:IMP_TAB_INFO.colName)
  return &colname_;
}

// optional uint32 rowKeyMax = 3;
inline bool IMP_TAB_INFO::has_rowkeymax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMP_TAB_INFO::set_has_rowkeymax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMP_TAB_INFO::clear_has_rowkeymax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMP_TAB_INFO::clear_rowkeymax() {
  rowkeymax_ = 0u;
  clear_has_rowkeymax();
}
inline ::google::protobuf::uint32 IMP_TAB_INFO::rowkeymax() const {
  // @@protoc_insertion_point(field_get:IMP_TAB_INFO.rowKeyMax)
  return rowkeymax_;
}
inline void IMP_TAB_INFO::set_rowkeymax(::google::protobuf::uint32 value) {
  set_has_rowkeymax();
  rowkeymax_ = value;
  // @@protoc_insertion_point(field_set:IMP_TAB_INFO.rowKeyMax)
}

// -------------------------------------------------------------------

// IMP_DB_INFO

// required uint32 dbID = 1;
inline bool IMP_DB_INFO::has_dbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMP_DB_INFO::set_has_dbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMP_DB_INFO::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMP_DB_INFO::clear_dbid() {
  dbid_ = 0u;
  clear_has_dbid();
}
inline ::google::protobuf::uint32 IMP_DB_INFO::dbid() const {
  // @@protoc_insertion_point(field_get:IMP_DB_INFO.dbID)
  return dbid_;
}
inline void IMP_DB_INFO::set_dbid(::google::protobuf::uint32 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:IMP_DB_INFO.dbID)
}

// repeated .IMP_TAB_INFO tableInfo = 2;
inline int IMP_DB_INFO::tableinfo_size() const {
  return tableinfo_.size();
}
inline void IMP_DB_INFO::clear_tableinfo() {
  tableinfo_.Clear();
}
inline const ::IMP_TAB_INFO& IMP_DB_INFO::tableinfo(int index) const {
  // @@protoc_insertion_point(field_get:IMP_DB_INFO.tableInfo)
  return tableinfo_.Get(index);
}
inline ::IMP_TAB_INFO* IMP_DB_INFO::mutable_tableinfo(int index) {
  // @@protoc_insertion_point(field_mutable:IMP_DB_INFO.tableInfo)
  return tableinfo_.Mutable(index);
}
inline ::IMP_TAB_INFO* IMP_DB_INFO::add_tableinfo() {
  // @@protoc_insertion_point(field_add:IMP_DB_INFO.tableInfo)
  return tableinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IMP_TAB_INFO >&
IMP_DB_INFO::tableinfo() const {
  // @@protoc_insertion_point(field_list:IMP_DB_INFO.tableInfo)
  return tableinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::IMP_TAB_INFO >*
IMP_DB_INFO::mutable_tableinfo() {
  // @@protoc_insertion_point(field_mutable_list:IMP_DB_INFO.tableInfo)
  return &tableinfo_;
}

// -------------------------------------------------------------------

// MSG_DS_RA_IMPORT_TASK_SEND

// required uint32 taskID = 1;
inline bool MSG_DS_RA_IMPORT_TASK_SEND::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DS_RA_IMPORT_TASK_SEND::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DS_RA_IMPORT_TASK_SEND::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DS_RA_IMPORT_TASK_SEND::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_DS_RA_IMPORT_TASK_SEND::taskid() const {
  // @@protoc_insertion_point(field_get:MSG_DS_RA_IMPORT_TASK_SEND.taskID)
  return taskid_;
}
inline void MSG_DS_RA_IMPORT_TASK_SEND::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_DS_RA_IMPORT_TASK_SEND.taskID)
}

// repeated .IMP_DB_INFO dbInfo = 2;
inline int MSG_DS_RA_IMPORT_TASK_SEND::dbinfo_size() const {
  return dbinfo_.size();
}
inline void MSG_DS_RA_IMPORT_TASK_SEND::clear_dbinfo() {
  dbinfo_.Clear();
}
inline const ::IMP_DB_INFO& MSG_DS_RA_IMPORT_TASK_SEND::dbinfo(int index) const {
  // @@protoc_insertion_point(field_get:MSG_DS_RA_IMPORT_TASK_SEND.dbInfo)
  return dbinfo_.Get(index);
}
inline ::IMP_DB_INFO* MSG_DS_RA_IMPORT_TASK_SEND::mutable_dbinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MSG_DS_RA_IMPORT_TASK_SEND.dbInfo)
  return dbinfo_.Mutable(index);
}
inline ::IMP_DB_INFO* MSG_DS_RA_IMPORT_TASK_SEND::add_dbinfo() {
  // @@protoc_insertion_point(field_add:MSG_DS_RA_IMPORT_TASK_SEND.dbInfo)
  return dbinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IMP_DB_INFO >&
MSG_DS_RA_IMPORT_TASK_SEND::dbinfo() const {
  // @@protoc_insertion_point(field_list:MSG_DS_RA_IMPORT_TASK_SEND.dbInfo)
  return dbinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::IMP_DB_INFO >*
MSG_DS_RA_IMPORT_TASK_SEND::mutable_dbinfo() {
  // @@protoc_insertion_point(field_mutable_list:MSG_DS_RA_IMPORT_TASK_SEND.dbInfo)
  return &dbinfo_;
}

// -------------------------------------------------------------------

// MSG_RA_DS_IMPORT_ERROR_INFO_ACK

// required uint32 taskID = 1;
inline bool MSG_RA_DS_IMPORT_ERROR_INFO_ACK::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_RA_DS_IMPORT_ERROR_INFO_ACK::taskid() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.taskID)
  return taskid_;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.taskID)
}

// required int32 statusCode = 2;
inline bool MSG_RA_DS_IMPORT_ERROR_INFO_ACK::has_statuscode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_has_statuscode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 MSG_RA_DS_IMPORT_ERROR_INFO_ACK::statuscode() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusCode)
  return statuscode_;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusCode)
}

// required string statusMsg = 3;
inline bool MSG_RA_DS_IMPORT_ERROR_INFO_ACK::has_statusmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_has_statusmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::clear_has_statusmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::clear_statusmsg() {
  if (statusmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statusmsg_->clear();
  }
  clear_has_statusmsg();
}
inline const ::std::string& MSG_RA_DS_IMPORT_ERROR_INFO_ACK::statusmsg() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusMsg)
  return *statusmsg_;
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_statusmsg(const ::std::string& value) {
  set_has_statusmsg();
  if (statusmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statusmsg_ = new ::std::string;
  }
  statusmsg_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusMsg)
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_statusmsg(const char* value) {
  set_has_statusmsg();
  if (statusmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statusmsg_ = new ::std::string;
  }
  statusmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusMsg)
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_statusmsg(const char* value, size_t size) {
  set_has_statusmsg();
  if (statusmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statusmsg_ = new ::std::string;
  }
  statusmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusMsg)
}
inline ::std::string* MSG_RA_DS_IMPORT_ERROR_INFO_ACK::mutable_statusmsg() {
  set_has_statusmsg();
  if (statusmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statusmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusMsg)
  return statusmsg_;
}
inline ::std::string* MSG_RA_DS_IMPORT_ERROR_INFO_ACK::release_statusmsg() {
  clear_has_statusmsg();
  if (statusmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statusmsg_;
    statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statusmsg_;
  }
  if (statusmsg) {
    set_has_statusmsg();
    statusmsg_ = statusmsg;
  } else {
    clear_has_statusmsg();
    statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_RA_DS_IMPORT_ERROR_INFO_ACK.statusMsg)
}

// -------------------------------------------------------------------

// COL_VALUE

// optional string strValue = 1;
inline bool COL_VALUE::has_strvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COL_VALUE::set_has_strvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COL_VALUE::clear_has_strvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COL_VALUE::clear_strvalue() {
  if (strvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strvalue_->clear();
  }
  clear_has_strvalue();
}
inline const ::std::string& COL_VALUE::strvalue() const {
  // @@protoc_insertion_point(field_get:COL_VALUE.strValue)
  return *strvalue_;
}
inline void COL_VALUE::set_strvalue(const ::std::string& value) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(value);
  // @@protoc_insertion_point(field_set:COL_VALUE.strValue)
}
inline void COL_VALUE::set_strvalue(const char* value) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:COL_VALUE.strValue)
}
inline void COL_VALUE::set_strvalue(const char* value, size_t size) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:COL_VALUE.strValue)
}
inline ::std::string* COL_VALUE::mutable_strvalue() {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:COL_VALUE.strValue)
  return strvalue_;
}
inline ::std::string* COL_VALUE::release_strvalue() {
  clear_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strvalue_;
    strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void COL_VALUE::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strvalue_;
  }
  if (strvalue) {
    set_has_strvalue();
    strvalue_ = strvalue;
  } else {
    clear_has_strvalue();
    strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:COL_VALUE.strValue)
}

// optional int64 iValue = 2;
inline bool COL_VALUE::has_ivalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COL_VALUE::set_has_ivalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COL_VALUE::clear_has_ivalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COL_VALUE::clear_ivalue() {
  ivalue_ = GOOGLE_LONGLONG(0);
  clear_has_ivalue();
}
inline ::google::protobuf::int64 COL_VALUE::ivalue() const {
  // @@protoc_insertion_point(field_get:COL_VALUE.iValue)
  return ivalue_;
}
inline void COL_VALUE::set_ivalue(::google::protobuf::int64 value) {
  set_has_ivalue();
  ivalue_ = value;
  // @@protoc_insertion_point(field_set:COL_VALUE.iValue)
}

// optional float fValue = 3;
inline bool COL_VALUE::has_fvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void COL_VALUE::set_has_fvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void COL_VALUE::clear_has_fvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void COL_VALUE::clear_fvalue() {
  fvalue_ = 0;
  clear_has_fvalue();
}
inline float COL_VALUE::fvalue() const {
  // @@protoc_insertion_point(field_get:COL_VALUE.fValue)
  return fvalue_;
}
inline void COL_VALUE::set_fvalue(float value) {
  set_has_fvalue();
  fvalue_ = value;
  // @@protoc_insertion_point(field_set:COL_VALUE.fValue)
}

// optional double dValue = 4;
inline bool COL_VALUE::has_dvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void COL_VALUE::set_has_dvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void COL_VALUE::clear_has_dvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void COL_VALUE::clear_dvalue() {
  dvalue_ = 0;
  clear_has_dvalue();
}
inline double COL_VALUE::dvalue() const {
  // @@protoc_insertion_point(field_get:COL_VALUE.dValue)
  return dvalue_;
}
inline void COL_VALUE::set_dvalue(double value) {
  set_has_dvalue();
  dvalue_ = value;
  // @@protoc_insertion_point(field_set:COL_VALUE.dValue)
}

// required uint64 rowNo = 5;
inline bool COL_VALUE::has_rowno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void COL_VALUE::set_has_rowno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void COL_VALUE::clear_has_rowno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void COL_VALUE::clear_rowno() {
  rowno_ = GOOGLE_ULONGLONG(0);
  clear_has_rowno();
}
inline ::google::protobuf::uint64 COL_VALUE::rowno() const {
  // @@protoc_insertion_point(field_get:COL_VALUE.rowNo)
  return rowno_;
}
inline void COL_VALUE::set_rowno(::google::protobuf::uint64 value) {
  set_has_rowno();
  rowno_ = value;
  // @@protoc_insertion_point(field_set:COL_VALUE.rowNo)
}

// -------------------------------------------------------------------

// COL_DATA

// required string colName = 1;
inline bool COL_DATA::has_colname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COL_DATA::set_has_colname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COL_DATA::clear_has_colname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COL_DATA::clear_colname() {
  if (colname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    colname_->clear();
  }
  clear_has_colname();
}
inline const ::std::string& COL_DATA::colname() const {
  // @@protoc_insertion_point(field_get:COL_DATA.colName)
  return *colname_;
}
inline void COL_DATA::set_colname(const ::std::string& value) {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    colname_ = new ::std::string;
  }
  colname_->assign(value);
  // @@protoc_insertion_point(field_set:COL_DATA.colName)
}
inline void COL_DATA::set_colname(const char* value) {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    colname_ = new ::std::string;
  }
  colname_->assign(value);
  // @@protoc_insertion_point(field_set_char:COL_DATA.colName)
}
inline void COL_DATA::set_colname(const char* value, size_t size) {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    colname_ = new ::std::string;
  }
  colname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:COL_DATA.colName)
}
inline ::std::string* COL_DATA::mutable_colname() {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    colname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:COL_DATA.colName)
  return colname_;
}
inline ::std::string* COL_DATA::release_colname() {
  clear_has_colname();
  if (colname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = colname_;
    colname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void COL_DATA::set_allocated_colname(::std::string* colname) {
  if (colname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete colname_;
  }
  if (colname) {
    set_has_colname();
    colname_ = colname;
  } else {
    clear_has_colname();
    colname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:COL_DATA.colName)
}

// required .COL_DATA.COLUMN_TYPE colType = 2 [default = STRING];
inline bool COL_DATA::has_coltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COL_DATA::set_has_coltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COL_DATA::clear_has_coltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COL_DATA::clear_coltype() {
  coltype_ = 0;
  clear_has_coltype();
}
inline ::COL_DATA_COLUMN_TYPE COL_DATA::coltype() const {
  // @@protoc_insertion_point(field_get:COL_DATA.colType)
  return static_cast< ::COL_DATA_COLUMN_TYPE >(coltype_);
}
inline void COL_DATA::set_coltype(::COL_DATA_COLUMN_TYPE value) {
  assert(::COL_DATA_COLUMN_TYPE_IsValid(value));
  set_has_coltype();
  coltype_ = value;
  // @@protoc_insertion_point(field_set:COL_DATA.colType)
}

// repeated .COL_VALUE colValue = 3;
inline int COL_DATA::colvalue_size() const {
  return colvalue_.size();
}
inline void COL_DATA::clear_colvalue() {
  colvalue_.Clear();
}
inline const ::COL_VALUE& COL_DATA::colvalue(int index) const {
  // @@protoc_insertion_point(field_get:COL_DATA.colValue)
  return colvalue_.Get(index);
}
inline ::COL_VALUE* COL_DATA::mutable_colvalue(int index) {
  // @@protoc_insertion_point(field_mutable:COL_DATA.colValue)
  return colvalue_.Mutable(index);
}
inline ::COL_VALUE* COL_DATA::add_colvalue() {
  // @@protoc_insertion_point(field_add:COL_DATA.colValue)
  return colvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::COL_VALUE >&
COL_DATA::colvalue() const {
  // @@protoc_insertion_point(field_list:COL_DATA.colValue)
  return colvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::COL_VALUE >*
COL_DATA::mutable_colvalue() {
  // @@protoc_insertion_point(field_mutable_list:COL_DATA.colValue)
  return &colvalue_;
}

// -------------------------------------------------------------------

// MSG_RA_DS_IMPORT_TASK_ACK

// required uint32 taskID = 1;
inline bool MSG_RA_DS_IMPORT_TASK_ACK::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 MSG_RA_DS_IMPORT_TASK_ACK::taskid() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_TASK_ACK.taskID)
  return taskid_;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_TASK_ACK.taskID)
}

// required uint32 dbID = 2;
inline bool MSG_RA_DS_IMPORT_TASK_ACK::has_dbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_has_dbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_dbid() {
  dbid_ = 0u;
  clear_has_dbid();
}
inline ::google::protobuf::uint32 MSG_RA_DS_IMPORT_TASK_ACK::dbid() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_TASK_ACK.dbID)
  return dbid_;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_dbid(::google::protobuf::uint32 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_TASK_ACK.dbID)
}

// required string tableName = 3;
inline bool MSG_RA_DS_IMPORT_TASK_ACK::has_tablename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_has_tablename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& MSG_RA_DS_IMPORT_TASK_ACK::tablename() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_TASK_ACK.tableName)
  return *tablename_;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_TASK_ACK.tableName)
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_RA_DS_IMPORT_TASK_ACK.tableName)
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_RA_DS_IMPORT_TASK_ACK.tableName)
}
inline ::std::string* MSG_RA_DS_IMPORT_TASK_ACK::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_RA_DS_IMPORT_TASK_ACK.tableName)
  return tablename_;
}
inline ::std::string* MSG_RA_DS_IMPORT_TASK_ACK::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_RA_DS_IMPORT_TASK_ACK.tableName)
}

// required uint32 subTaskNo = 4;
inline bool MSG_RA_DS_IMPORT_TASK_ACK::has_subtaskno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_has_subtaskno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_has_subtaskno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_subtaskno() {
  subtaskno_ = 0u;
  clear_has_subtaskno();
}
inline ::google::protobuf::uint32 MSG_RA_DS_IMPORT_TASK_ACK::subtaskno() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_TASK_ACK.subTaskNo)
  return subtaskno_;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_subtaskno(::google::protobuf::uint32 value) {
  set_has_subtaskno();
  subtaskno_ = value;
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_TASK_ACK.subTaskNo)
}

// required uint32 subTaskNum = 5;
inline bool MSG_RA_DS_IMPORT_TASK_ACK::has_subtasknum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_has_subtasknum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_has_subtasknum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_subtasknum() {
  subtasknum_ = 0u;
  clear_has_subtasknum();
}
inline ::google::protobuf::uint32 MSG_RA_DS_IMPORT_TASK_ACK::subtasknum() const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_TASK_ACK.subTaskNum)
  return subtasknum_;
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::set_subtasknum(::google::protobuf::uint32 value) {
  set_has_subtasknum();
  subtasknum_ = value;
  // @@protoc_insertion_point(field_set:MSG_RA_DS_IMPORT_TASK_ACK.subTaskNum)
}

// repeated .COL_DATA colValue = 6;
inline int MSG_RA_DS_IMPORT_TASK_ACK::colvalue_size() const {
  return colvalue_.size();
}
inline void MSG_RA_DS_IMPORT_TASK_ACK::clear_colvalue() {
  colvalue_.Clear();
}
inline const ::COL_DATA& MSG_RA_DS_IMPORT_TASK_ACK::colvalue(int index) const {
  // @@protoc_insertion_point(field_get:MSG_RA_DS_IMPORT_TASK_ACK.colValue)
  return colvalue_.Get(index);
}
inline ::COL_DATA* MSG_RA_DS_IMPORT_TASK_ACK::mutable_colvalue(int index) {
  // @@protoc_insertion_point(field_mutable:MSG_RA_DS_IMPORT_TASK_ACK.colValue)
  return colvalue_.Mutable(index);
}
inline ::COL_DATA* MSG_RA_DS_IMPORT_TASK_ACK::add_colvalue() {
  // @@protoc_insertion_point(field_add:MSG_RA_DS_IMPORT_TASK_ACK.colValue)
  return colvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::COL_DATA >&
MSG_RA_DS_IMPORT_TASK_ACK::colvalue() const {
  // @@protoc_insertion_point(field_list:MSG_RA_DS_IMPORT_TASK_ACK.colValue)
  return colvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::COL_DATA >*
MSG_RA_DS_IMPORT_TASK_ACK::mutable_colvalue() {
  // @@protoc_insertion_point(field_mutable_list:MSG_RA_DS_IMPORT_TASK_ACK.colValue)
  return &colvalue_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::COL_DATA_COLUMN_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::COL_DATA_COLUMN_TYPE>() {
  return ::COL_DATA_COLUMN_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto__INCLUDED
