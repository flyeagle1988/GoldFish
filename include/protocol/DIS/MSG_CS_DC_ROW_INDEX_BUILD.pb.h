// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_CS_DC_ROW_INDEX_BUILD.proto

#ifndef PROTOBUF_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto__INCLUDED
#define PROTOBUF_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

class MSG_CS_DC_ROW_INDEX_BUILD;
class MSG_DC_CS_ROW_INDEX_BUILD_ACK;
class ROWKEY_ENTRY;
class MSG_CS_CS_ROW_INDEX_SEND;
class ROW_INDEX_TABLE;
class MSG_CS_CS_ROW_INDEX_SEND_ACK;

// ===================================================================

class MSG_CS_DC_ROW_INDEX_BUILD : public ::google::protobuf::Message {
 public:
  MSG_CS_DC_ROW_INDEX_BUILD();
  virtual ~MSG_CS_DC_ROW_INDEX_BUILD();

  MSG_CS_DC_ROW_INDEX_BUILD(const MSG_CS_DC_ROW_INDEX_BUILD& from);

  inline MSG_CS_DC_ROW_INDEX_BUILD& operator=(const MSG_CS_DC_ROW_INDEX_BUILD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_CS_DC_ROW_INDEX_BUILD& default_instance();

  void Swap(MSG_CS_DC_ROW_INDEX_BUILD* other);

  // implements Message ----------------------------------------------

  MSG_CS_DC_ROW_INDEX_BUILD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_CS_DC_ROW_INDEX_BUILD& from);
  void MergeFrom(const MSG_CS_DC_ROW_INDEX_BUILD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dbID = 1;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dbid() const;
  inline void set_dbid(::google::protobuf::uint32 value);

  // required string tableName = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // @@protoc_insertion_point(class_scope:MSG_CS_DC_ROW_INDEX_BUILD)
 private:
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_tablename();
  inline void clear_has_tablename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::google::protobuf::uint32 dbid_;
  friend void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

  void InitAsDefaultInstance();
  static MSG_CS_DC_ROW_INDEX_BUILD* default_instance_;
};
// -------------------------------------------------------------------

class MSG_DC_CS_ROW_INDEX_BUILD_ACK : public ::google::protobuf::Message {
 public:
  MSG_DC_CS_ROW_INDEX_BUILD_ACK();
  virtual ~MSG_DC_CS_ROW_INDEX_BUILD_ACK();

  MSG_DC_CS_ROW_INDEX_BUILD_ACK(const MSG_DC_CS_ROW_INDEX_BUILD_ACK& from);

  inline MSG_DC_CS_ROW_INDEX_BUILD_ACK& operator=(const MSG_DC_CS_ROW_INDEX_BUILD_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_DC_CS_ROW_INDEX_BUILD_ACK& default_instance();

  void Swap(MSG_DC_CS_ROW_INDEX_BUILD_ACK* other);

  // implements Message ----------------------------------------------

  MSG_DC_CS_ROW_INDEX_BUILD_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_DC_CS_ROW_INDEX_BUILD_ACK& from);
  void MergeFrom(const MSG_DC_CS_ROW_INDEX_BUILD_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string csIP = 1;
  inline bool has_csip() const;
  inline void clear_csip();
  static const int kCsIPFieldNumber = 1;
  inline const ::std::string& csip() const;
  inline void set_csip(const ::std::string& value);
  inline void set_csip(const char* value);
  inline void set_csip(const char* value, size_t size);
  inline ::std::string* mutable_csip();
  inline ::std::string* release_csip();
  inline void set_allocated_csip(::std::string* csip);

  // required int32 statusCode = 2;
  inline bool has_statuscode() const;
  inline void clear_statuscode();
  static const int kStatusCodeFieldNumber = 2;
  inline ::google::protobuf::int32 statuscode() const;
  inline void set_statuscode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MSG_DC_CS_ROW_INDEX_BUILD_ACK)
 private:
  inline void set_has_csip();
  inline void clear_has_csip();
  inline void set_has_statuscode();
  inline void clear_has_statuscode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* csip_;
  ::google::protobuf::int32 statuscode_;
  friend void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

  void InitAsDefaultInstance();
  static MSG_DC_CS_ROW_INDEX_BUILD_ACK* default_instance_;
};
// -------------------------------------------------------------------

class ROWKEY_ENTRY : public ::google::protobuf::Message {
 public:
  ROWKEY_ENTRY();
  virtual ~ROWKEY_ENTRY();

  ROWKEY_ENTRY(const ROWKEY_ENTRY& from);

  inline ROWKEY_ENTRY& operator=(const ROWKEY_ENTRY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROWKEY_ENTRY& default_instance();

  void Swap(ROWKEY_ENTRY* other);

  // implements Message ----------------------------------------------

  ROWKEY_ENTRY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROWKEY_ENTRY& from);
  void MergeFrom(const ROWKEY_ENTRY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 rowKey = 1;
  inline bool has_rowkey() const;
  inline void clear_rowkey();
  static const int kRowKeyFieldNumber = 1;
  inline ::google::protobuf::uint64 rowkey() const;
  inline void set_rowkey(::google::protobuf::uint64 value);

  // required uint32 entry = 2;
  inline bool has_entry() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline ::google::protobuf::uint32 entry() const;
  inline void set_entry(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ROWKEY_ENTRY)
 private:
  inline void set_has_rowkey();
  inline void clear_has_rowkey();
  inline void set_has_entry();
  inline void clear_has_entry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rowkey_;
  ::google::protobuf::uint32 entry_;
  friend void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

  void InitAsDefaultInstance();
  static ROWKEY_ENTRY* default_instance_;
};
// -------------------------------------------------------------------

class MSG_CS_CS_ROW_INDEX_SEND : public ::google::protobuf::Message {
 public:
  MSG_CS_CS_ROW_INDEX_SEND();
  virtual ~MSG_CS_CS_ROW_INDEX_SEND();

  MSG_CS_CS_ROW_INDEX_SEND(const MSG_CS_CS_ROW_INDEX_SEND& from);

  inline MSG_CS_CS_ROW_INDEX_SEND& operator=(const MSG_CS_CS_ROW_INDEX_SEND& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_CS_CS_ROW_INDEX_SEND& default_instance();

  void Swap(MSG_CS_CS_ROW_INDEX_SEND* other);

  // implements Message ----------------------------------------------

  MSG_CS_CS_ROW_INDEX_SEND* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_CS_CS_ROW_INDEX_SEND& from);
  void MergeFrom(const MSG_CS_CS_ROW_INDEX_SEND& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dbID = 1;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dbid() const;
  inline void set_dbid(::google::protobuf::uint32 value);

  // required string tableName = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // required string columnName = 3;
  inline bool has_columnname() const;
  inline void clear_columnname();
  static const int kColumnNameFieldNumber = 3;
  inline const ::std::string& columnname() const;
  inline void set_columnname(const ::std::string& value);
  inline void set_columnname(const char* value);
  inline void set_columnname(const char* value, size_t size);
  inline ::std::string* mutable_columnname();
  inline ::std::string* release_columnname();
  inline void set_allocated_columnname(::std::string* columnname);

  // repeated .ROWKEY_ENTRY subRowTable = 4;
  inline int subrowtable_size() const;
  inline void clear_subrowtable();
  static const int kSubRowTableFieldNumber = 4;
  inline const ::ROWKEY_ENTRY& subrowtable(int index) const;
  inline ::ROWKEY_ENTRY* mutable_subrowtable(int index);
  inline ::ROWKEY_ENTRY* add_subrowtable();
  inline const ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >&
      subrowtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >*
      mutable_subrowtable();

  // @@protoc_insertion_point(class_scope:MSG_CS_CS_ROW_INDEX_SEND)
 private:
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_columnname();
  inline void clear_has_columnname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::std::string* columnname_;
  ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY > subrowtable_;
  ::google::protobuf::uint32 dbid_;
  friend void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

  void InitAsDefaultInstance();
  static MSG_CS_CS_ROW_INDEX_SEND* default_instance_;
};
// -------------------------------------------------------------------

class ROW_INDEX_TABLE : public ::google::protobuf::Message {
 public:
  ROW_INDEX_TABLE();
  virtual ~ROW_INDEX_TABLE();

  ROW_INDEX_TABLE(const ROW_INDEX_TABLE& from);

  inline ROW_INDEX_TABLE& operator=(const ROW_INDEX_TABLE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROW_INDEX_TABLE& default_instance();

  void Swap(ROW_INDEX_TABLE* other);

  // implements Message ----------------------------------------------

  ROW_INDEX_TABLE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROW_INDEX_TABLE& from);
  void MergeFrom(const ROW_INDEX_TABLE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string columnName = 1;
  inline bool has_columnname() const;
  inline void clear_columnname();
  static const int kColumnNameFieldNumber = 1;
  inline const ::std::string& columnname() const;
  inline void set_columnname(const ::std::string& value);
  inline void set_columnname(const char* value);
  inline void set_columnname(const char* value, size_t size);
  inline ::std::string* mutable_columnname();
  inline ::std::string* release_columnname();
  inline void set_allocated_columnname(::std::string* columnname);

  // repeated uint32 entry = 2;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline ::google::protobuf::uint32 entry(int index) const;
  inline void set_entry(int index, ::google::protobuf::uint32 value);
  inline void add_entry(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      entry() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:ROW_INDEX_TABLE)
 private:
  inline void set_has_columnname();
  inline void clear_has_columnname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* columnname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > entry_;
  friend void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

  void InitAsDefaultInstance();
  static ROW_INDEX_TABLE* default_instance_;
};
// -------------------------------------------------------------------

class MSG_CS_CS_ROW_INDEX_SEND_ACK : public ::google::protobuf::Message {
 public:
  MSG_CS_CS_ROW_INDEX_SEND_ACK();
  virtual ~MSG_CS_CS_ROW_INDEX_SEND_ACK();

  MSG_CS_CS_ROW_INDEX_SEND_ACK(const MSG_CS_CS_ROW_INDEX_SEND_ACK& from);

  inline MSG_CS_CS_ROW_INDEX_SEND_ACK& operator=(const MSG_CS_CS_ROW_INDEX_SEND_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSG_CS_CS_ROW_INDEX_SEND_ACK& default_instance();

  void Swap(MSG_CS_CS_ROW_INDEX_SEND_ACK* other);

  // implements Message ----------------------------------------------

  MSG_CS_CS_ROW_INDEX_SEND_ACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSG_CS_CS_ROW_INDEX_SEND_ACK& from);
  void MergeFrom(const MSG_CS_CS_ROW_INDEX_SEND_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dbID = 1;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dbid() const;
  inline void set_dbid(::google::protobuf::uint32 value);

  // required string tableName = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // repeated .ROW_INDEX_TABLE rowIndexTable = 3;
  inline int rowindextable_size() const;
  inline void clear_rowindextable();
  static const int kRowIndexTableFieldNumber = 3;
  inline const ::ROW_INDEX_TABLE& rowindextable(int index) const;
  inline ::ROW_INDEX_TABLE* mutable_rowindextable(int index);
  inline ::ROW_INDEX_TABLE* add_rowindextable();
  inline const ::google::protobuf::RepeatedPtrField< ::ROW_INDEX_TABLE >&
      rowindextable() const;
  inline ::google::protobuf::RepeatedPtrField< ::ROW_INDEX_TABLE >*
      mutable_rowindextable();

  // @@protoc_insertion_point(class_scope:MSG_CS_CS_ROW_INDEX_SEND_ACK)
 private:
  inline void set_has_dbid();
  inline void clear_has_dbid();
  inline void set_has_tablename();
  inline void clear_has_tablename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::google::protobuf::RepeatedPtrField< ::ROW_INDEX_TABLE > rowindextable_;
  ::google::protobuf::uint32 dbid_;
  friend void  protobuf_AddDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_AssignDesc_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();
  friend void protobuf_ShutdownFile_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto();

  void InitAsDefaultInstance();
  static MSG_CS_CS_ROW_INDEX_SEND_ACK* default_instance_;
};
// ===================================================================


// ===================================================================

// MSG_CS_DC_ROW_INDEX_BUILD

// required uint32 dbID = 1;
inline bool MSG_CS_DC_ROW_INDEX_BUILD::has_dbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_has_dbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::clear_dbid() {
  dbid_ = 0u;
  clear_has_dbid();
}
inline ::google::protobuf::uint32 MSG_CS_DC_ROW_INDEX_BUILD::dbid() const {
  // @@protoc_insertion_point(field_get:MSG_CS_DC_ROW_INDEX_BUILD.dbID)
  return dbid_;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_dbid(::google::protobuf::uint32 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:MSG_CS_DC_ROW_INDEX_BUILD.dbID)
}

// required string tableName = 2;
inline bool MSG_CS_DC_ROW_INDEX_BUILD::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& MSG_CS_DC_ROW_INDEX_BUILD::tablename() const {
  // @@protoc_insertion_point(field_get:MSG_CS_DC_ROW_INDEX_BUILD.tableName)
  return *tablename_;
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_CS_DC_ROW_INDEX_BUILD.tableName)
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_CS_DC_ROW_INDEX_BUILD.tableName)
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_CS_DC_ROW_INDEX_BUILD.tableName)
}
inline ::std::string* MSG_CS_DC_ROW_INDEX_BUILD::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_CS_DC_ROW_INDEX_BUILD.tableName)
  return tablename_;
}
inline ::std::string* MSG_CS_DC_ROW_INDEX_BUILD::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_CS_DC_ROW_INDEX_BUILD::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_CS_DC_ROW_INDEX_BUILD.tableName)
}

// -------------------------------------------------------------------

// MSG_DC_CS_ROW_INDEX_BUILD_ACK

// optional string csIP = 1;
inline bool MSG_DC_CS_ROW_INDEX_BUILD_ACK::has_csip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_has_csip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::clear_has_csip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::clear_csip() {
  if (csip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_->clear();
  }
  clear_has_csip();
}
inline const ::std::string& MSG_DC_CS_ROW_INDEX_BUILD_ACK::csip() const {
  // @@protoc_insertion_point(field_get:MSG_DC_CS_ROW_INDEX_BUILD_ACK.csIP)
  return *csip_;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_csip(const ::std::string& value) {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  csip_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_DC_CS_ROW_INDEX_BUILD_ACK.csIP)
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_csip(const char* value) {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  csip_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_DC_CS_ROW_INDEX_BUILD_ACK.csIP)
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_csip(const char* value, size_t size) {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  csip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_DC_CS_ROW_INDEX_BUILD_ACK.csIP)
}
inline ::std::string* MSG_DC_CS_ROW_INDEX_BUILD_ACK::mutable_csip() {
  set_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_DC_CS_ROW_INDEX_BUILD_ACK.csIP)
  return csip_;
}
inline ::std::string* MSG_DC_CS_ROW_INDEX_BUILD_ACK::release_csip() {
  clear_has_csip();
  if (csip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = csip_;
    csip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_allocated_csip(::std::string* csip) {
  if (csip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csip_;
  }
  if (csip) {
    set_has_csip();
    csip_ = csip;
  } else {
    clear_has_csip();
    csip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_DC_CS_ROW_INDEX_BUILD_ACK.csIP)
}

// required int32 statusCode = 2;
inline bool MSG_DC_CS_ROW_INDEX_BUILD_ACK::has_statuscode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_has_statuscode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::clear_has_statuscode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::clear_statuscode() {
  statuscode_ = 0;
  clear_has_statuscode();
}
inline ::google::protobuf::int32 MSG_DC_CS_ROW_INDEX_BUILD_ACK::statuscode() const {
  // @@protoc_insertion_point(field_get:MSG_DC_CS_ROW_INDEX_BUILD_ACK.statusCode)
  return statuscode_;
}
inline void MSG_DC_CS_ROW_INDEX_BUILD_ACK::set_statuscode(::google::protobuf::int32 value) {
  set_has_statuscode();
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:MSG_DC_CS_ROW_INDEX_BUILD_ACK.statusCode)
}

// -------------------------------------------------------------------

// ROWKEY_ENTRY

// required uint64 rowKey = 1;
inline bool ROWKEY_ENTRY::has_rowkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROWKEY_ENTRY::set_has_rowkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROWKEY_ENTRY::clear_has_rowkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROWKEY_ENTRY::clear_rowkey() {
  rowkey_ = GOOGLE_ULONGLONG(0);
  clear_has_rowkey();
}
inline ::google::protobuf::uint64 ROWKEY_ENTRY::rowkey() const {
  // @@protoc_insertion_point(field_get:ROWKEY_ENTRY.rowKey)
  return rowkey_;
}
inline void ROWKEY_ENTRY::set_rowkey(::google::protobuf::uint64 value) {
  set_has_rowkey();
  rowkey_ = value;
  // @@protoc_insertion_point(field_set:ROWKEY_ENTRY.rowKey)
}

// required uint32 entry = 2;
inline bool ROWKEY_ENTRY::has_entry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROWKEY_ENTRY::set_has_entry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROWKEY_ENTRY::clear_has_entry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROWKEY_ENTRY::clear_entry() {
  entry_ = 0u;
  clear_has_entry();
}
inline ::google::protobuf::uint32 ROWKEY_ENTRY::entry() const {
  // @@protoc_insertion_point(field_get:ROWKEY_ENTRY.entry)
  return entry_;
}
inline void ROWKEY_ENTRY::set_entry(::google::protobuf::uint32 value) {
  set_has_entry();
  entry_ = value;
  // @@protoc_insertion_point(field_set:ROWKEY_ENTRY.entry)
}

// -------------------------------------------------------------------

// MSG_CS_CS_ROW_INDEX_SEND

// required uint32 dbID = 1;
inline bool MSG_CS_CS_ROW_INDEX_SEND::has_dbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_has_dbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_dbid() {
  dbid_ = 0u;
  clear_has_dbid();
}
inline ::google::protobuf::uint32 MSG_CS_CS_ROW_INDEX_SEND::dbid() const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND.dbID)
  return dbid_;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_dbid(::google::protobuf::uint32 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:MSG_CS_CS_ROW_INDEX_SEND.dbID)
}

// required string tableName = 2;
inline bool MSG_CS_CS_ROW_INDEX_SEND::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& MSG_CS_CS_ROW_INDEX_SEND::tablename() const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND.tableName)
  return *tablename_;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_CS_CS_ROW_INDEX_SEND.tableName)
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_CS_CS_ROW_INDEX_SEND.tableName)
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_CS_CS_ROW_INDEX_SEND.tableName)
}
inline ::std::string* MSG_CS_CS_ROW_INDEX_SEND::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_CS_CS_ROW_INDEX_SEND.tableName)
  return tablename_;
}
inline ::std::string* MSG_CS_CS_ROW_INDEX_SEND::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_CS_CS_ROW_INDEX_SEND.tableName)
}

// required string columnName = 3;
inline bool MSG_CS_CS_ROW_INDEX_SEND::has_columnname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_has_columnname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_has_columnname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_columnname() {
  if (columnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_->clear();
  }
  clear_has_columnname();
}
inline const ::std::string& MSG_CS_CS_ROW_INDEX_SEND::columnname() const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND.columnName)
  return *columnname_;
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_columnname(const ::std::string& value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_CS_CS_ROW_INDEX_SEND.columnName)
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_columnname(const char* value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_CS_CS_ROW_INDEX_SEND.columnName)
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_columnname(const char* value, size_t size) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_CS_CS_ROW_INDEX_SEND.columnName)
}
inline ::std::string* MSG_CS_CS_ROW_INDEX_SEND::mutable_columnname() {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_CS_CS_ROW_INDEX_SEND.columnName)
  return columnname_;
}
inline ::std::string* MSG_CS_CS_ROW_INDEX_SEND::release_columnname() {
  clear_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = columnname_;
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_CS_CS_ROW_INDEX_SEND::set_allocated_columnname(::std::string* columnname) {
  if (columnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete columnname_;
  }
  if (columnname) {
    set_has_columnname();
    columnname_ = columnname;
  } else {
    clear_has_columnname();
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_CS_CS_ROW_INDEX_SEND.columnName)
}

// repeated .ROWKEY_ENTRY subRowTable = 4;
inline int MSG_CS_CS_ROW_INDEX_SEND::subrowtable_size() const {
  return subrowtable_.size();
}
inline void MSG_CS_CS_ROW_INDEX_SEND::clear_subrowtable() {
  subrowtable_.Clear();
}
inline const ::ROWKEY_ENTRY& MSG_CS_CS_ROW_INDEX_SEND::subrowtable(int index) const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND.subRowTable)
  return subrowtable_.Get(index);
}
inline ::ROWKEY_ENTRY* MSG_CS_CS_ROW_INDEX_SEND::mutable_subrowtable(int index) {
  // @@protoc_insertion_point(field_mutable:MSG_CS_CS_ROW_INDEX_SEND.subRowTable)
  return subrowtable_.Mutable(index);
}
inline ::ROWKEY_ENTRY* MSG_CS_CS_ROW_INDEX_SEND::add_subrowtable() {
  // @@protoc_insertion_point(field_add:MSG_CS_CS_ROW_INDEX_SEND.subRowTable)
  return subrowtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >&
MSG_CS_CS_ROW_INDEX_SEND::subrowtable() const {
  // @@protoc_insertion_point(field_list:MSG_CS_CS_ROW_INDEX_SEND.subRowTable)
  return subrowtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::ROWKEY_ENTRY >*
MSG_CS_CS_ROW_INDEX_SEND::mutable_subrowtable() {
  // @@protoc_insertion_point(field_mutable_list:MSG_CS_CS_ROW_INDEX_SEND.subRowTable)
  return &subrowtable_;
}

// -------------------------------------------------------------------

// ROW_INDEX_TABLE

// required string columnName = 1;
inline bool ROW_INDEX_TABLE::has_columnname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROW_INDEX_TABLE::set_has_columnname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROW_INDEX_TABLE::clear_has_columnname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROW_INDEX_TABLE::clear_columnname() {
  if (columnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_->clear();
  }
  clear_has_columnname();
}
inline const ::std::string& ROW_INDEX_TABLE::columnname() const {
  // @@protoc_insertion_point(field_get:ROW_INDEX_TABLE.columnName)
  return *columnname_;
}
inline void ROW_INDEX_TABLE::set_columnname(const ::std::string& value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
  // @@protoc_insertion_point(field_set:ROW_INDEX_TABLE.columnName)
}
inline void ROW_INDEX_TABLE::set_columnname(const char* value) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ROW_INDEX_TABLE.columnName)
}
inline void ROW_INDEX_TABLE::set_columnname(const char* value, size_t size) {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  columnname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ROW_INDEX_TABLE.columnName)
}
inline ::std::string* ROW_INDEX_TABLE::mutable_columnname() {
  set_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    columnname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ROW_INDEX_TABLE.columnName)
  return columnname_;
}
inline ::std::string* ROW_INDEX_TABLE::release_columnname() {
  clear_has_columnname();
  if (columnname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = columnname_;
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ROW_INDEX_TABLE::set_allocated_columnname(::std::string* columnname) {
  if (columnname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete columnname_;
  }
  if (columnname) {
    set_has_columnname();
    columnname_ = columnname;
  } else {
    clear_has_columnname();
    columnname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ROW_INDEX_TABLE.columnName)
}

// repeated uint32 entry = 2;
inline int ROW_INDEX_TABLE::entry_size() const {
  return entry_.size();
}
inline void ROW_INDEX_TABLE::clear_entry() {
  entry_.Clear();
}
inline ::google::protobuf::uint32 ROW_INDEX_TABLE::entry(int index) const {
  // @@protoc_insertion_point(field_get:ROW_INDEX_TABLE.entry)
  return entry_.Get(index);
}
inline void ROW_INDEX_TABLE::set_entry(int index, ::google::protobuf::uint32 value) {
  entry_.Set(index, value);
  // @@protoc_insertion_point(field_set:ROW_INDEX_TABLE.entry)
}
inline void ROW_INDEX_TABLE::add_entry(::google::protobuf::uint32 value) {
  entry_.Add(value);
  // @@protoc_insertion_point(field_add:ROW_INDEX_TABLE.entry)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ROW_INDEX_TABLE::entry() const {
  // @@protoc_insertion_point(field_list:ROW_INDEX_TABLE.entry)
  return entry_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ROW_INDEX_TABLE::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:ROW_INDEX_TABLE.entry)
  return &entry_;
}

// -------------------------------------------------------------------

// MSG_CS_CS_ROW_INDEX_SEND_ACK

// required uint32 dbID = 1;
inline bool MSG_CS_CS_ROW_INDEX_SEND_ACK::has_dbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_has_dbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::clear_dbid() {
  dbid_ = 0u;
  clear_has_dbid();
}
inline ::google::protobuf::uint32 MSG_CS_CS_ROW_INDEX_SEND_ACK::dbid() const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND_ACK.dbID)
  return dbid_;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_dbid(::google::protobuf::uint32 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:MSG_CS_CS_ROW_INDEX_SEND_ACK.dbID)
}

// required string tableName = 2;
inline bool MSG_CS_CS_ROW_INDEX_SEND_ACK::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& MSG_CS_CS_ROW_INDEX_SEND_ACK::tablename() const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND_ACK.tableName)
  return *tablename_;
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:MSG_CS_CS_ROW_INDEX_SEND_ACK.tableName)
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:MSG_CS_CS_ROW_INDEX_SEND_ACK.tableName)
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MSG_CS_CS_ROW_INDEX_SEND_ACK.tableName)
}
inline ::std::string* MSG_CS_CS_ROW_INDEX_SEND_ACK::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MSG_CS_CS_ROW_INDEX_SEND_ACK.tableName)
  return tablename_;
}
inline ::std::string* MSG_CS_CS_ROW_INDEX_SEND_ACK::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MSG_CS_CS_ROW_INDEX_SEND_ACK.tableName)
}

// repeated .ROW_INDEX_TABLE rowIndexTable = 3;
inline int MSG_CS_CS_ROW_INDEX_SEND_ACK::rowindextable_size() const {
  return rowindextable_.size();
}
inline void MSG_CS_CS_ROW_INDEX_SEND_ACK::clear_rowindextable() {
  rowindextable_.Clear();
}
inline const ::ROW_INDEX_TABLE& MSG_CS_CS_ROW_INDEX_SEND_ACK::rowindextable(int index) const {
  // @@protoc_insertion_point(field_get:MSG_CS_CS_ROW_INDEX_SEND_ACK.rowIndexTable)
  return rowindextable_.Get(index);
}
inline ::ROW_INDEX_TABLE* MSG_CS_CS_ROW_INDEX_SEND_ACK::mutable_rowindextable(int index) {
  // @@protoc_insertion_point(field_mutable:MSG_CS_CS_ROW_INDEX_SEND_ACK.rowIndexTable)
  return rowindextable_.Mutable(index);
}
inline ::ROW_INDEX_TABLE* MSG_CS_CS_ROW_INDEX_SEND_ACK::add_rowindextable() {
  // @@protoc_insertion_point(field_add:MSG_CS_CS_ROW_INDEX_SEND_ACK.rowIndexTable)
  return rowindextable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ROW_INDEX_TABLE >&
MSG_CS_CS_ROW_INDEX_SEND_ACK::rowindextable() const {
  // @@protoc_insertion_point(field_list:MSG_CS_CS_ROW_INDEX_SEND_ACK.rowIndexTable)
  return rowindextable_;
}
inline ::google::protobuf::RepeatedPtrField< ::ROW_INDEX_TABLE >*
MSG_CS_CS_ROW_INDEX_SEND_ACK::mutable_rowindextable() {
  // @@protoc_insertion_point(field_mutable_list:MSG_CS_CS_ROW_INDEX_SEND_ACK.rowIndexTable)
  return &rowindextable_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSG_5fCS_5fDC_5fROW_5fINDEX_5fBUILD_2eproto__INCLUDED
