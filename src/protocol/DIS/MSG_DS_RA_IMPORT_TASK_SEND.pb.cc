// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_DS_RA_IMPORT_TASK_SEND.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_DS_RA_IMPORT_TASK_SEND.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* IMP_TAB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMP_TAB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMP_DB_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMP_DB_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_RA_IMPORT_TASK_SEND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_RA_IMPORT_TASK_SEND_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_RA_DS_IMPORT_ERROR_INFO_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_RA_DS_IMPORT_ERROR_INFO_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* COL_VALUE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COL_VALUE_reflection_ = NULL;
const ::google::protobuf::Descriptor* COL_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COL_DATA_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* COL_DATA_COLUMN_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MSG_RA_DS_IMPORT_TASK_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_RA_DS_IMPORT_TASK_ACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto() {
  protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_DS_RA_IMPORT_TASK_SEND.proto");
  GOOGLE_CHECK(file != NULL);
  IMP_TAB_INFO_descriptor_ = file->message_type(0);
  static const int IMP_TAB_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_TAB_INFO, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_TAB_INFO, colname_),
  };
  IMP_TAB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMP_TAB_INFO_descriptor_,
      IMP_TAB_INFO::default_instance_,
      IMP_TAB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_TAB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_TAB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMP_TAB_INFO));
  IMP_DB_INFO_descriptor_ = file->message_type(1);
  static const int IMP_DB_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_DB_INFO, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_DB_INFO, tableinfo_),
  };
  IMP_DB_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMP_DB_INFO_descriptor_,
      IMP_DB_INFO::default_instance_,
      IMP_DB_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_DB_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMP_DB_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMP_DB_INFO));
  MSG_DS_RA_IMPORT_TASK_SEND_descriptor_ = file->message_type(2);
  static const int MSG_DS_RA_IMPORT_TASK_SEND_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_RA_IMPORT_TASK_SEND, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_RA_IMPORT_TASK_SEND, dbinfo_),
  };
  MSG_DS_RA_IMPORT_TASK_SEND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_RA_IMPORT_TASK_SEND_descriptor_,
      MSG_DS_RA_IMPORT_TASK_SEND::default_instance_,
      MSG_DS_RA_IMPORT_TASK_SEND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_RA_IMPORT_TASK_SEND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_RA_IMPORT_TASK_SEND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_RA_IMPORT_TASK_SEND));
  MSG_RA_DS_IMPORT_ERROR_INFO_ACK_descriptor_ = file->message_type(3);
  static const int MSG_RA_DS_IMPORT_ERROR_INFO_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_ERROR_INFO_ACK, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_ERROR_INFO_ACK, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_ERROR_INFO_ACK, statusmsg_),
  };
  MSG_RA_DS_IMPORT_ERROR_INFO_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_RA_DS_IMPORT_ERROR_INFO_ACK_descriptor_,
      MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance_,
      MSG_RA_DS_IMPORT_ERROR_INFO_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_ERROR_INFO_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_ERROR_INFO_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_RA_DS_IMPORT_ERROR_INFO_ACK));
  COL_VALUE_descriptor_ = file->message_type(4);
  static const int COL_VALUE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, strvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, ivalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, dvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, rowno_),
  };
  COL_VALUE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COL_VALUE_descriptor_,
      COL_VALUE::default_instance_,
      COL_VALUE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_VALUE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COL_VALUE));
  COL_DATA_descriptor_ = file->message_type(5);
  static const int COL_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_DATA, colname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_DATA, coltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_DATA, colvalue_),
  };
  COL_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COL_DATA_descriptor_,
      COL_DATA::default_instance_,
      COL_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COL_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COL_DATA));
  COL_DATA_COLUMN_TYPE_descriptor_ = COL_DATA_descriptor_->enum_type(0);
  MSG_RA_DS_IMPORT_TASK_ACK_descriptor_ = file->message_type(6);
  static const int MSG_RA_DS_IMPORT_TASK_ACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, subtaskno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, subtasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, colvalue_),
  };
  MSG_RA_DS_IMPORT_TASK_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_RA_DS_IMPORT_TASK_ACK_descriptor_,
      MSG_RA_DS_IMPORT_TASK_ACK::default_instance_,
      MSG_RA_DS_IMPORT_TASK_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DS_IMPORT_TASK_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_RA_DS_IMPORT_TASK_ACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMP_TAB_INFO_descriptor_, &IMP_TAB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMP_DB_INFO_descriptor_, &IMP_DB_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_RA_IMPORT_TASK_SEND_descriptor_, &MSG_DS_RA_IMPORT_TASK_SEND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_RA_DS_IMPORT_ERROR_INFO_ACK_descriptor_, &MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COL_VALUE_descriptor_, &COL_VALUE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COL_DATA_descriptor_, &COL_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_RA_DS_IMPORT_TASK_ACK_descriptor_, &MSG_RA_DS_IMPORT_TASK_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto() {
  delete IMP_TAB_INFO::default_instance_;
  delete IMP_TAB_INFO_reflection_;
  delete IMP_DB_INFO::default_instance_;
  delete IMP_DB_INFO_reflection_;
  delete MSG_DS_RA_IMPORT_TASK_SEND::default_instance_;
  delete MSG_DS_RA_IMPORT_TASK_SEND_reflection_;
  delete MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance_;
  delete MSG_RA_DS_IMPORT_ERROR_INFO_ACK_reflection_;
  delete COL_VALUE::default_instance_;
  delete COL_VALUE_reflection_;
  delete COL_DATA::default_instance_;
  delete COL_DATA_reflection_;
  delete MSG_RA_DS_IMPORT_TASK_ACK::default_instance_;
  delete MSG_RA_DS_IMPORT_TASK_ACK_reflection_;
}

void protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n MSG_DS_RA_IMPORT_TASK_SEND.proto\"2\n\014IM"
    "P_TAB_INFO\022\021\n\ttableName\030\001 \002(\t\022\017\n\007colName"
    "\030\002 \003(\t\"=\n\013IMP_DB_INFO\022\014\n\004dbID\030\001 \002(\r\022 \n\tt"
    "ableInfo\030\002 \003(\0132\r.IMP_TAB_INFO\"J\n\032MSG_DS_"
    "RA_IMPORT_TASK_SEND\022\016\n\006taskID\030\001 \002(\r\022\034\n\006d"
    "bInfo\030\002 \003(\0132\014.IMP_DB_INFO\"X\n\037MSG_RA_DS_I"
    "MPORT_ERROR_INFO_ACK\022\016\n\006taskID\030\001 \002(\r\022\022\n\n"
    "statusCode\030\002 \002(\005\022\021\n\tstatusMsg\030\003 \002(\t\"\\\n\tC"
    "OL_VALUE\022\020\n\010strValue\030\001 \001(\t\022\016\n\006iValue\030\002 \001"
    "(\003\022\016\n\006fValue\030\003 \001(\002\022\016\n\006dValue\030\004 \001(\001\022\r\n\005ro"
    "wNo\030\005 \002(\004\"\244\001\n\010COL_DATA\022\017\n\007colName\030\001 \002(\t\022"
    ".\n\007colType\030\002 \002(\0162\025.COL_DATA.COLUMN_TYPE:"
    "\006STRING\022\034\n\010colValue\030\003 \003(\0132\n.COL_VALUE\"9\n"
    "\013COLUMN_TYPE\022\n\n\006STRING\020\000\022\007\n\003INT\020\001\022\t\n\005FLO"
    "AT\020\002\022\n\n\006DOUBLE\020\003\"\220\001\n\031MSG_RA_DS_IMPORT_TA"
    "SK_ACK\022\016\n\006taskID\030\001 \002(\r\022\014\n\004dbID\030\002 \002(\r\022\021\n\t"
    "tableName\030\003 \002(\t\022\021\n\tsubTaskNo\030\004 \002(\r\022\022\n\nsu"
    "bTaskNum\030\005 \002(\r\022\033\n\010colValue\030\006 \003(\0132\t.COL_D"
    "ATA", 723);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_DS_RA_IMPORT_TASK_SEND.proto", &protobuf_RegisterTypes);
  IMP_TAB_INFO::default_instance_ = new IMP_TAB_INFO();
  IMP_DB_INFO::default_instance_ = new IMP_DB_INFO();
  MSG_DS_RA_IMPORT_TASK_SEND::default_instance_ = new MSG_DS_RA_IMPORT_TASK_SEND();
  MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance_ = new MSG_RA_DS_IMPORT_ERROR_INFO_ACK();
  COL_VALUE::default_instance_ = new COL_VALUE();
  COL_DATA::default_instance_ = new COL_DATA();
  MSG_RA_DS_IMPORT_TASK_ACK::default_instance_ = new MSG_RA_DS_IMPORT_TASK_ACK();
  IMP_TAB_INFO::default_instance_->InitAsDefaultInstance();
  IMP_DB_INFO::default_instance_->InitAsDefaultInstance();
  MSG_DS_RA_IMPORT_TASK_SEND::default_instance_->InitAsDefaultInstance();
  MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance_->InitAsDefaultInstance();
  COL_VALUE::default_instance_->InitAsDefaultInstance();
  COL_DATA::default_instance_->InitAsDefaultInstance();
  MSG_RA_DS_IMPORT_TASK_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto {
  StaticDescriptorInitializer_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto() {
    protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  }
} static_descriptor_initializer_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IMP_TAB_INFO::kTableNameFieldNumber;
const int IMP_TAB_INFO::kColNameFieldNumber;
#endif  // !_MSC_VER

IMP_TAB_INFO::IMP_TAB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMP_TAB_INFO)
}

void IMP_TAB_INFO::InitAsDefaultInstance() {
}

IMP_TAB_INFO::IMP_TAB_INFO(const IMP_TAB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMP_TAB_INFO)
}

void IMP_TAB_INFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMP_TAB_INFO::~IMP_TAB_INFO() {
  // @@protoc_insertion_point(destructor:IMP_TAB_INFO)
  SharedDtor();
}

void IMP_TAB_INFO::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void IMP_TAB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMP_TAB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMP_TAB_INFO_descriptor_;
}

const IMP_TAB_INFO& IMP_TAB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

IMP_TAB_INFO* IMP_TAB_INFO::default_instance_ = NULL;

IMP_TAB_INFO* IMP_TAB_INFO::New() const {
  return new IMP_TAB_INFO;
}

void IMP_TAB_INFO::Clear() {
  if (has_tablename()) {
    if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      tablename_->clear();
    }
  }
  colname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMP_TAB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMP_TAB_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tableName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_colName;
        break;
      }

      // repeated string colName = 2;
      case 2: {
        if (tag == 18) {
         parse_colName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_colname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->colname(this->colname_size() - 1).data(),
            this->colname(this->colname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "colname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_colName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMP_TAB_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMP_TAB_INFO)
  return false;
#undef DO_
}

void IMP_TAB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMP_TAB_INFO)
  // required string tableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablename(), output);
  }

  // repeated string colName = 2;
  for (int i = 0; i < this->colname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->colname(i).data(), this->colname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "colname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->colname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IMP_TAB_INFO)
}

::google::protobuf::uint8* IMP_TAB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMP_TAB_INFO)
  // required string tableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // repeated string colName = 2;
  for (int i = 0; i < this->colname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->colname(i).data(), this->colname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "colname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->colname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IMP_TAB_INFO)
  return target;
}

int IMP_TAB_INFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

  }
  // repeated string colName = 2;
  total_size += 1 * this->colname_size();
  for (int i = 0; i < this->colname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->colname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMP_TAB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMP_TAB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMP_TAB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMP_TAB_INFO::MergeFrom(const IMP_TAB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  colname_.MergeFrom(from.colname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMP_TAB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMP_TAB_INFO::CopyFrom(const IMP_TAB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMP_TAB_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMP_TAB_INFO::Swap(IMP_TAB_INFO* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    colname_.Swap(&other->colname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMP_TAB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMP_TAB_INFO_descriptor_;
  metadata.reflection = IMP_TAB_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMP_DB_INFO::kDbIDFieldNumber;
const int IMP_DB_INFO::kTableInfoFieldNumber;
#endif  // !_MSC_VER

IMP_DB_INFO::IMP_DB_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMP_DB_INFO)
}

void IMP_DB_INFO::InitAsDefaultInstance() {
}

IMP_DB_INFO::IMP_DB_INFO(const IMP_DB_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMP_DB_INFO)
}

void IMP_DB_INFO::SharedCtor() {
  _cached_size_ = 0;
  dbid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMP_DB_INFO::~IMP_DB_INFO() {
  // @@protoc_insertion_point(destructor:IMP_DB_INFO)
  SharedDtor();
}

void IMP_DB_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMP_DB_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMP_DB_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMP_DB_INFO_descriptor_;
}

const IMP_DB_INFO& IMP_DB_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

IMP_DB_INFO* IMP_DB_INFO::default_instance_ = NULL;

IMP_DB_INFO* IMP_DB_INFO::New() const {
  return new IMP_DB_INFO;
}

void IMP_DB_INFO::Clear() {
  dbid_ = 0u;
  tableinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMP_DB_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMP_DB_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dbID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tableInfo;
        break;
      }

      // repeated .IMP_TAB_INFO tableInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_tableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tableinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tableInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMP_DB_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMP_DB_INFO)
  return false;
#undef DO_
}

void IMP_DB_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMP_DB_INFO)
  // required uint32 dbID = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dbid(), output);
  }

  // repeated .IMP_TAB_INFO tableInfo = 2;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tableinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IMP_DB_INFO)
}

::google::protobuf::uint8* IMP_DB_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMP_DB_INFO)
  // required uint32 dbID = 1;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dbid(), target);
  }

  // repeated .IMP_TAB_INFO tableInfo = 2;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tableinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IMP_DB_INFO)
  return target;
}

int IMP_DB_INFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dbID = 1;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbid());
    }

  }
  // repeated .IMP_TAB_INFO tableInfo = 2;
  total_size += 1 * this->tableinfo_size();
  for (int i = 0; i < this->tableinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMP_DB_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMP_DB_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMP_DB_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMP_DB_INFO::MergeFrom(const IMP_DB_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  tableinfo_.MergeFrom(from.tableinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMP_DB_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMP_DB_INFO::CopyFrom(const IMP_DB_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMP_DB_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tableinfo())) return false;
  return true;
}

void IMP_DB_INFO::Swap(IMP_DB_INFO* other) {
  if (other != this) {
    std::swap(dbid_, other->dbid_);
    tableinfo_.Swap(&other->tableinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMP_DB_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMP_DB_INFO_descriptor_;
  metadata.reflection = IMP_DB_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_RA_IMPORT_TASK_SEND::kTaskIDFieldNumber;
const int MSG_DS_RA_IMPORT_TASK_SEND::kDbInfoFieldNumber;
#endif  // !_MSC_VER

MSG_DS_RA_IMPORT_TASK_SEND::MSG_DS_RA_IMPORT_TASK_SEND()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG_DS_RA_IMPORT_TASK_SEND)
}

void MSG_DS_RA_IMPORT_TASK_SEND::InitAsDefaultInstance() {
}

MSG_DS_RA_IMPORT_TASK_SEND::MSG_DS_RA_IMPORT_TASK_SEND(const MSG_DS_RA_IMPORT_TASK_SEND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSG_DS_RA_IMPORT_TASK_SEND)
}

void MSG_DS_RA_IMPORT_TASK_SEND::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_RA_IMPORT_TASK_SEND::~MSG_DS_RA_IMPORT_TASK_SEND() {
  // @@protoc_insertion_point(destructor:MSG_DS_RA_IMPORT_TASK_SEND)
  SharedDtor();
}

void MSG_DS_RA_IMPORT_TASK_SEND::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_RA_IMPORT_TASK_SEND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_RA_IMPORT_TASK_SEND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_RA_IMPORT_TASK_SEND_descriptor_;
}

const MSG_DS_RA_IMPORT_TASK_SEND& MSG_DS_RA_IMPORT_TASK_SEND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

MSG_DS_RA_IMPORT_TASK_SEND* MSG_DS_RA_IMPORT_TASK_SEND::default_instance_ = NULL;

MSG_DS_RA_IMPORT_TASK_SEND* MSG_DS_RA_IMPORT_TASK_SEND::New() const {
  return new MSG_DS_RA_IMPORT_TASK_SEND;
}

void MSG_DS_RA_IMPORT_TASK_SEND::Clear() {
  taskid_ = 0u;
  dbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_RA_IMPORT_TASK_SEND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSG_DS_RA_IMPORT_TASK_SEND)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dbInfo;
        break;
      }

      // repeated .IMP_DB_INFO dbInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_dbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dbInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSG_DS_RA_IMPORT_TASK_SEND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSG_DS_RA_IMPORT_TASK_SEND)
  return false;
#undef DO_
}

void MSG_DS_RA_IMPORT_TASK_SEND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSG_DS_RA_IMPORT_TASK_SEND)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // repeated .IMP_DB_INFO dbInfo = 2;
  for (int i = 0; i < this->dbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dbinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSG_DS_RA_IMPORT_TASK_SEND)
}

::google::protobuf::uint8* MSG_DS_RA_IMPORT_TASK_SEND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG_DS_RA_IMPORT_TASK_SEND)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // repeated .IMP_DB_INFO dbInfo = 2;
  for (int i = 0; i < this->dbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dbinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG_DS_RA_IMPORT_TASK_SEND)
  return target;
}

int MSG_DS_RA_IMPORT_TASK_SEND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  // repeated .IMP_DB_INFO dbInfo = 2;
  total_size += 1 * this->dbinfo_size();
  for (int i = 0; i < this->dbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_RA_IMPORT_TASK_SEND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_RA_IMPORT_TASK_SEND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_RA_IMPORT_TASK_SEND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_RA_IMPORT_TASK_SEND::MergeFrom(const MSG_DS_RA_IMPORT_TASK_SEND& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbinfo_.MergeFrom(from.dbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_RA_IMPORT_TASK_SEND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_RA_IMPORT_TASK_SEND::CopyFrom(const MSG_DS_RA_IMPORT_TASK_SEND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_RA_IMPORT_TASK_SEND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dbinfo())) return false;
  return true;
}

void MSG_DS_RA_IMPORT_TASK_SEND::Swap(MSG_DS_RA_IMPORT_TASK_SEND* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    dbinfo_.Swap(&other->dbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_RA_IMPORT_TASK_SEND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_RA_IMPORT_TASK_SEND_descriptor_;
  metadata.reflection = MSG_DS_RA_IMPORT_TASK_SEND_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_RA_DS_IMPORT_ERROR_INFO_ACK::kTaskIDFieldNumber;
const int MSG_RA_DS_IMPORT_ERROR_INFO_ACK::kStatusCodeFieldNumber;
const int MSG_RA_DS_IMPORT_ERROR_INFO_ACK::kStatusMsgFieldNumber;
#endif  // !_MSC_VER

MSG_RA_DS_IMPORT_ERROR_INFO_ACK::MSG_RA_DS_IMPORT_ERROR_INFO_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::InitAsDefaultInstance() {
}

MSG_RA_DS_IMPORT_ERROR_INFO_ACK::MSG_RA_DS_IMPORT_ERROR_INFO_ACK(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_ = 0u;
  statuscode_ = 0;
  statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_RA_DS_IMPORT_ERROR_INFO_ACK::~MSG_RA_DS_IMPORT_ERROR_INFO_ACK() {
  // @@protoc_insertion_point(destructor:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  SharedDtor();
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::SharedDtor() {
  if (statusmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statusmsg_;
  }
  if (this != default_instance_) {
  }
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_RA_DS_IMPORT_ERROR_INFO_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_RA_DS_IMPORT_ERROR_INFO_ACK_descriptor_;
}

const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

MSG_RA_DS_IMPORT_ERROR_INFO_ACK* MSG_RA_DS_IMPORT_ERROR_INFO_ACK::default_instance_ = NULL;

MSG_RA_DS_IMPORT_ERROR_INFO_ACK* MSG_RA_DS_IMPORT_ERROR_INFO_ACK::New() const {
  return new MSG_RA_DS_IMPORT_ERROR_INFO_ACK;
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_RA_DS_IMPORT_ERROR_INFO_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(taskid_, statuscode_);
    if (has_statusmsg()) {
      if (statusmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statusmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_RA_DS_IMPORT_ERROR_INFO_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_statusCode;
        break;
      }

      // required int32 statusCode = 2;
      case 2: {
        if (tag == 16) {
         parse_statusCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_statusMsg;
        break;
      }

      // required string statusMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_statusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statusmsg().data(), this->statusmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statusmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  return false;
#undef DO_
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required int32 statusCode = 2;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->statuscode(), output);
  }

  // required string statusMsg = 3;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statusmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->statusmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
}

::google::protobuf::uint8* MSG_RA_DS_IMPORT_ERROR_INFO_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required int32 statusCode = 2;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->statuscode(), target);
  }

  // required string statusMsg = 3;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statusmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->statusmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG_RA_DS_IMPORT_ERROR_INFO_ACK)
  return target;
}

int MSG_RA_DS_IMPORT_ERROR_INFO_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required int32 statusCode = 2;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // required string statusMsg = 3;
    if (has_statusmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statusmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_RA_DS_IMPORT_ERROR_INFO_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_RA_DS_IMPORT_ERROR_INFO_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::MergeFrom(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_statusmsg()) {
      set_statusmsg(from.statusmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::CopyFrom(const MSG_RA_DS_IMPORT_ERROR_INFO_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RA_DS_IMPORT_ERROR_INFO_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MSG_RA_DS_IMPORT_ERROR_INFO_ACK::Swap(MSG_RA_DS_IMPORT_ERROR_INFO_ACK* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(statuscode_, other->statuscode_);
    std::swap(statusmsg_, other->statusmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_RA_DS_IMPORT_ERROR_INFO_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_RA_DS_IMPORT_ERROR_INFO_ACK_descriptor_;
  metadata.reflection = MSG_RA_DS_IMPORT_ERROR_INFO_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int COL_VALUE::kStrValueFieldNumber;
const int COL_VALUE::kIValueFieldNumber;
const int COL_VALUE::kFValueFieldNumber;
const int COL_VALUE::kDValueFieldNumber;
const int COL_VALUE::kRowNoFieldNumber;
#endif  // !_MSC_VER

COL_VALUE::COL_VALUE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:COL_VALUE)
}

void COL_VALUE::InitAsDefaultInstance() {
}

COL_VALUE::COL_VALUE(const COL_VALUE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:COL_VALUE)
}

void COL_VALUE::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ivalue_ = GOOGLE_LONGLONG(0);
  fvalue_ = 0;
  dvalue_ = 0;
  rowno_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COL_VALUE::~COL_VALUE() {
  // @@protoc_insertion_point(destructor:COL_VALUE)
  SharedDtor();
}

void COL_VALUE::SharedDtor() {
  if (strvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strvalue_;
  }
  if (this != default_instance_) {
  }
}

void COL_VALUE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COL_VALUE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COL_VALUE_descriptor_;
}

const COL_VALUE& COL_VALUE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

COL_VALUE* COL_VALUE::default_instance_ = NULL;

COL_VALUE* COL_VALUE::New() const {
  return new COL_VALUE;
}

void COL_VALUE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<COL_VALUE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ivalue_, fvalue_);
    if (has_strvalue()) {
      if (strvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strvalue_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COL_VALUE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COL_VALUE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strValue = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strvalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iValue;
        break;
      }

      // optional int64 iValue = 2;
      case 2: {
        if (tag == 16) {
         parse_iValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_fValue;
        break;
      }

      // optional float fValue = 3;
      case 3: {
        if (tag == 29) {
         parse_fValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dValue;
        break;
      }

      // optional double dValue = 4;
      case 4: {
        if (tag == 33) {
         parse_dValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dvalue_)));
          set_has_dvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rowNo;
        break;
      }

      // required uint64 rowNo = 5;
      case 5: {
        if (tag == 40) {
         parse_rowNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rowno_)));
          set_has_rowno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COL_VALUE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COL_VALUE)
  return false;
#undef DO_
}

void COL_VALUE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COL_VALUE)
  // optional string strValue = 1;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strvalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strvalue(), output);
  }

  // optional int64 iValue = 2;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ivalue(), output);
  }

  // optional float fValue = 3;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fvalue(), output);
  }

  // optional double dValue = 4;
  if (has_dvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dvalue(), output);
  }

  // required uint64 rowNo = 5;
  if (has_rowno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rowno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COL_VALUE)
}

::google::protobuf::uint8* COL_VALUE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COL_VALUE)
  // optional string strValue = 1;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strvalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strvalue(), target);
  }

  // optional int64 iValue = 2;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ivalue(), target);
  }

  // optional float fValue = 3;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fvalue(), target);
  }

  // optional double dValue = 4;
  if (has_dvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dvalue(), target);
  }

  // required uint64 rowNo = 5;
  if (has_rowno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rowno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COL_VALUE)
  return target;
}

int COL_VALUE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strValue = 1;
    if (has_strvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
    }

    // optional int64 iValue = 2;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ivalue());
    }

    // optional float fValue = 3;
    if (has_fvalue()) {
      total_size += 1 + 4;
    }

    // optional double dValue = 4;
    if (has_dvalue()) {
      total_size += 1 + 8;
    }

    // required uint64 rowNo = 5;
    if (has_rowno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rowno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COL_VALUE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COL_VALUE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COL_VALUE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COL_VALUE::MergeFrom(const COL_VALUE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strvalue()) {
      set_strvalue(from.strvalue());
    }
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_dvalue()) {
      set_dvalue(from.dvalue());
    }
    if (from.has_rowno()) {
      set_rowno(from.rowno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COL_VALUE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COL_VALUE::CopyFrom(const COL_VALUE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COL_VALUE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void COL_VALUE::Swap(COL_VALUE* other) {
  if (other != this) {
    std::swap(strvalue_, other->strvalue_);
    std::swap(ivalue_, other->ivalue_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(dvalue_, other->dvalue_);
    std::swap(rowno_, other->rowno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COL_VALUE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COL_VALUE_descriptor_;
  metadata.reflection = COL_VALUE_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* COL_DATA_COLUMN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COL_DATA_COLUMN_TYPE_descriptor_;
}
bool COL_DATA_COLUMN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const COL_DATA_COLUMN_TYPE COL_DATA::STRING;
const COL_DATA_COLUMN_TYPE COL_DATA::INT;
const COL_DATA_COLUMN_TYPE COL_DATA::FLOAT;
const COL_DATA_COLUMN_TYPE COL_DATA::DOUBLE;
const COL_DATA_COLUMN_TYPE COL_DATA::COLUMN_TYPE_MIN;
const COL_DATA_COLUMN_TYPE COL_DATA::COLUMN_TYPE_MAX;
const int COL_DATA::COLUMN_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int COL_DATA::kColNameFieldNumber;
const int COL_DATA::kColTypeFieldNumber;
const int COL_DATA::kColValueFieldNumber;
#endif  // !_MSC_VER

COL_DATA::COL_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:COL_DATA)
}

void COL_DATA::InitAsDefaultInstance() {
}

COL_DATA::COL_DATA(const COL_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:COL_DATA)
}

void COL_DATA::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  colname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COL_DATA::~COL_DATA() {
  // @@protoc_insertion_point(destructor:COL_DATA)
  SharedDtor();
}

void COL_DATA::SharedDtor() {
  if (colname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete colname_;
  }
  if (this != default_instance_) {
  }
}

void COL_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COL_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COL_DATA_descriptor_;
}

const COL_DATA& COL_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

COL_DATA* COL_DATA::default_instance_ = NULL;

COL_DATA* COL_DATA::New() const {
  return new COL_DATA;
}

void COL_DATA::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_colname()) {
      if (colname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        colname_->clear();
      }
    }
    coltype_ = 0;
  }
  colvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COL_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COL_DATA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string colName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->colname().data(), this->colname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "colname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_colType;
        break;
      }

      // required .COL_DATA.COLUMN_TYPE colType = 2 [default = STRING];
      case 2: {
        if (tag == 16) {
         parse_colType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COL_DATA_COLUMN_TYPE_IsValid(value)) {
            set_coltype(static_cast< ::COL_DATA_COLUMN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_colValue;
        break;
      }

      // repeated .COL_VALUE colValue = 3;
      case 3: {
        if (tag == 26) {
         parse_colValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_colValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COL_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COL_DATA)
  return false;
#undef DO_
}

void COL_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COL_DATA)
  // required string colName = 1;
  if (has_colname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->colname().data(), this->colname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "colname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->colname(), output);
  }

  // required .COL_DATA.COLUMN_TYPE colType = 2 [default = STRING];
  if (has_coltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coltype(), output);
  }

  // repeated .COL_VALUE colValue = 3;
  for (int i = 0; i < this->colvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->colvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COL_DATA)
}

::google::protobuf::uint8* COL_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COL_DATA)
  // required string colName = 1;
  if (has_colname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->colname().data(), this->colname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "colname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->colname(), target);
  }

  // required .COL_DATA.COLUMN_TYPE colType = 2 [default = STRING];
  if (has_coltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coltype(), target);
  }

  // repeated .COL_VALUE colValue = 3;
  for (int i = 0; i < this->colvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->colvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COL_DATA)
  return target;
}

int COL_DATA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string colName = 1;
    if (has_colname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->colname());
    }

    // required .COL_DATA.COLUMN_TYPE colType = 2 [default = STRING];
    if (has_coltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coltype());
    }

  }
  // repeated .COL_VALUE colValue = 3;
  total_size += 1 * this->colvalue_size();
  for (int i = 0; i < this->colvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COL_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COL_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COL_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COL_DATA::MergeFrom(const COL_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  colvalue_.MergeFrom(from.colvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_colname()) {
      set_colname(from.colname());
    }
    if (from.has_coltype()) {
      set_coltype(from.coltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COL_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COL_DATA::CopyFrom(const COL_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COL_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->colvalue())) return false;
  return true;
}

void COL_DATA::Swap(COL_DATA* other) {
  if (other != this) {
    std::swap(colname_, other->colname_);
    std::swap(coltype_, other->coltype_);
    colvalue_.Swap(&other->colvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COL_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COL_DATA_descriptor_;
  metadata.reflection = COL_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_RA_DS_IMPORT_TASK_ACK::kTaskIDFieldNumber;
const int MSG_RA_DS_IMPORT_TASK_ACK::kDbIDFieldNumber;
const int MSG_RA_DS_IMPORT_TASK_ACK::kTableNameFieldNumber;
const int MSG_RA_DS_IMPORT_TASK_ACK::kSubTaskNoFieldNumber;
const int MSG_RA_DS_IMPORT_TASK_ACK::kSubTaskNumFieldNumber;
const int MSG_RA_DS_IMPORT_TASK_ACK::kColValueFieldNumber;
#endif  // !_MSC_VER

MSG_RA_DS_IMPORT_TASK_ACK::MSG_RA_DS_IMPORT_TASK_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG_RA_DS_IMPORT_TASK_ACK)
}

void MSG_RA_DS_IMPORT_TASK_ACK::InitAsDefaultInstance() {
}

MSG_RA_DS_IMPORT_TASK_ACK::MSG_RA_DS_IMPORT_TASK_ACK(const MSG_RA_DS_IMPORT_TASK_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSG_RA_DS_IMPORT_TASK_ACK)
}

void MSG_RA_DS_IMPORT_TASK_ACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_ = 0u;
  dbid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtaskno_ = 0u;
  subtasknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_RA_DS_IMPORT_TASK_ACK::~MSG_RA_DS_IMPORT_TASK_ACK() {
  // @@protoc_insertion_point(destructor:MSG_RA_DS_IMPORT_TASK_ACK)
  SharedDtor();
}

void MSG_RA_DS_IMPORT_TASK_ACK::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void MSG_RA_DS_IMPORT_TASK_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_RA_DS_IMPORT_TASK_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_RA_DS_IMPORT_TASK_ACK_descriptor_;
}

const MSG_RA_DS_IMPORT_TASK_ACK& MSG_RA_DS_IMPORT_TASK_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fRA_5fIMPORT_5fTASK_5fSEND_2eproto();
  return *default_instance_;
}

MSG_RA_DS_IMPORT_TASK_ACK* MSG_RA_DS_IMPORT_TASK_ACK::default_instance_ = NULL;

MSG_RA_DS_IMPORT_TASK_ACK* MSG_RA_DS_IMPORT_TASK_ACK::New() const {
  return new MSG_RA_DS_IMPORT_TASK_ACK;
}

void MSG_RA_DS_IMPORT_TASK_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_RA_DS_IMPORT_TASK_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(taskid_, dbid_);
    ZR_(subtaskno_, subtasknum_);
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  colvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_RA_DS_IMPORT_TASK_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSG_RA_DS_IMPORT_TASK_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbID;
        break;
      }

      // required uint32 dbID = 2;
      case 2: {
        if (tag == 16) {
         parse_dbID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tableName;
        break;
      }

      // required string tableName = 3;
      case 3: {
        if (tag == 26) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subTaskNo;
        break;
      }

      // required uint32 subTaskNo = 4;
      case 4: {
        if (tag == 32) {
         parse_subTaskNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtaskno_)));
          set_has_subtaskno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subTaskNum;
        break;
      }

      // required uint32 subTaskNum = 5;
      case 5: {
        if (tag == 40) {
         parse_subTaskNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtasknum_)));
          set_has_subtasknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_colValue;
        break;
      }

      // repeated .COL_DATA colValue = 6;
      case 6: {
        if (tag == 50) {
         parse_colValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_colValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSG_RA_DS_IMPORT_TASK_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSG_RA_DS_IMPORT_TASK_ACK)
  return false;
#undef DO_
}

void MSG_RA_DS_IMPORT_TASK_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSG_RA_DS_IMPORT_TASK_ACK)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 dbID = 2;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dbid(), output);
  }

  // required string tableName = 3;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tablename(), output);
  }

  // required uint32 subTaskNo = 4;
  if (has_subtaskno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subtaskno(), output);
  }

  // required uint32 subTaskNum = 5;
  if (has_subtasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subtasknum(), output);
  }

  // repeated .COL_DATA colValue = 6;
  for (int i = 0; i < this->colvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->colvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSG_RA_DS_IMPORT_TASK_ACK)
}

::google::protobuf::uint8* MSG_RA_DS_IMPORT_TASK_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG_RA_DS_IMPORT_TASK_ACK)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required uint32 dbID = 2;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dbid(), target);
  }

  // required string tableName = 3;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tablename(), target);
  }

  // required uint32 subTaskNo = 4;
  if (has_subtaskno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subtaskno(), target);
  }

  // required uint32 subTaskNum = 5;
  if (has_subtasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subtasknum(), target);
  }

  // repeated .COL_DATA colValue = 6;
  for (int i = 0; i < this->colvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->colvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG_RA_DS_IMPORT_TASK_ACK)
  return target;
}

int MSG_RA_DS_IMPORT_TASK_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 dbID = 2;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbid());
    }

    // required string tableName = 3;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // required uint32 subTaskNo = 4;
    if (has_subtaskno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtaskno());
    }

    // required uint32 subTaskNum = 5;
    if (has_subtasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtasknum());
    }

  }
  // repeated .COL_DATA colValue = 6;
  total_size += 1 * this->colvalue_size();
  for (int i = 0; i < this->colvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_RA_DS_IMPORT_TASK_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_RA_DS_IMPORT_TASK_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_RA_DS_IMPORT_TASK_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_RA_DS_IMPORT_TASK_ACK::MergeFrom(const MSG_RA_DS_IMPORT_TASK_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  colvalue_.MergeFrom(from.colvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_subtaskno()) {
      set_subtaskno(from.subtaskno());
    }
    if (from.has_subtasknum()) {
      set_subtasknum(from.subtasknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_RA_DS_IMPORT_TASK_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RA_DS_IMPORT_TASK_ACK::CopyFrom(const MSG_RA_DS_IMPORT_TASK_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RA_DS_IMPORT_TASK_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->colvalue())) return false;
  return true;
}

void MSG_RA_DS_IMPORT_TASK_ACK::Swap(MSG_RA_DS_IMPORT_TASK_ACK* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(dbid_, other->dbid_);
    std::swap(tablename_, other->tablename_);
    std::swap(subtaskno_, other->subtaskno_);
    std::swap(subtasknum_, other->subtasknum_);
    colvalue_.Swap(&other->colvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_RA_DS_IMPORT_TASK_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_RA_DS_IMPORT_TASK_ACK_descriptor_;
  metadata.reflection = MSG_RA_DS_IMPORT_TASK_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
