// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_DC_RA_DATABASE_INFO_GET.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_DC_RA_DATABASE_INFO_GET.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* COLUMN_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COLUMN_INFO_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* COLUMN_INFO_COLUMN_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TABLE_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TABLE_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* DATABASE_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DATABASE_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_RA_DC_DATABASE_INFO_GET_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_RA_DC_DATABASE_INFO_GET_ACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto() {
  protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_DC_RA_DATABASE_INFO_GET.proto");
  GOOGLE_CHECK(file != NULL);
  COLUMN_INFO_descriptor_ = file->message_type(0);
  static const int COLUMN_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, colname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, coltype_),
  };
  COLUMN_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COLUMN_INFO_descriptor_,
      COLUMN_INFO::default_instance_,
      COLUMN_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COLUMN_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COLUMN_INFO));
  COLUMN_INFO_COLUMN_TYPE_descriptor_ = COLUMN_INFO_descriptor_->enum_type(0);
  TABLE_INFO_descriptor_ = file->message_type(1);
  static const int TABLE_INFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INFO, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INFO, columndata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INFO, rownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INFO, tablesize_),
  };
  TABLE_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TABLE_INFO_descriptor_,
      TABLE_INFO::default_instance_,
      TABLE_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TABLE_INFO));
  DATABASE_INFO_descriptor_ = file->message_type(2);
  static const int DATABASE_INFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, tableinfo_),
  };
  DATABASE_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DATABASE_INFO_descriptor_,
      DATABASE_INFO::default_instance_,
      DATABASE_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DATABASE_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DATABASE_INFO));
  MSG_RA_DC_DATABASE_INFO_GET_ACK_descriptor_ = file->message_type(3);
  static const int MSG_RA_DC_DATABASE_INFO_GET_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DC_DATABASE_INFO_GET_ACK, statuscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DC_DATABASE_INFO_GET_ACK, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DC_DATABASE_INFO_GET_ACK, dbinfo_),
  };
  MSG_RA_DC_DATABASE_INFO_GET_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_RA_DC_DATABASE_INFO_GET_ACK_descriptor_,
      MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance_,
      MSG_RA_DC_DATABASE_INFO_GET_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DC_DATABASE_INFO_GET_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_RA_DC_DATABASE_INFO_GET_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_RA_DC_DATABASE_INFO_GET_ACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COLUMN_INFO_descriptor_, &COLUMN_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TABLE_INFO_descriptor_, &TABLE_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DATABASE_INFO_descriptor_, &DATABASE_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_RA_DC_DATABASE_INFO_GET_ACK_descriptor_, &MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto() {
  delete COLUMN_INFO::default_instance_;
  delete COLUMN_INFO_reflection_;
  delete TABLE_INFO::default_instance_;
  delete TABLE_INFO_reflection_;
  delete DATABASE_INFO::default_instance_;
  delete DATABASE_INFO_reflection_;
  delete MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance_;
  delete MSG_RA_DC_DATABASE_INFO_GET_ACK_reflection_;
}

void protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!MSG_DC_RA_DATABASE_INFO_GET.proto\"\214\001\n\013"
    "COLUMN_INFO\022\017\n\007colName\030\001 \002(\t\0221\n\007colType\030"
    "\002 \002(\0162\030.COLUMN_INFO.COLUMN_TYPE:\006STRING\""
    "9\n\013COLUMN_TYPE\022\n\n\006STRING\020\000\022\007\n\003INT\020\001\022\t\n\005F"
    "LOAT\020\002\022\n\n\006DOUBLE\020\003\"d\n\nTABLE_INFO\022\021\n\ttabl"
    "eName\030\001 \002(\t\022 \n\ncolumnData\030\002 \003(\0132\014.COLUMN"
    "_INFO\022\016\n\006rowNum\030\003 \002(\r\022\021\n\ttableSize\030\004 \002(\004"
    "\"=\n\rDATABASE_INFO\022\014\n\004DBID\030\001 \002(\005\022\036\n\ttable"
    "Info\030\002 \003(\0132\013.TABLE_INFO\"h\n\037MSG_RA_DC_DAT"
    "ABASE_INFO_GET_ACK\022\022\n\nstatusCode\030\001 \002(\005\022\021"
    "\n\tstatusMsg\030\002 \002(\t\022\036\n\006dbInfo\030\003 \003(\0132\016.DATA"
    "BASE_INFO", 449);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_DC_RA_DATABASE_INFO_GET.proto", &protobuf_RegisterTypes);
  COLUMN_INFO::default_instance_ = new COLUMN_INFO();
  TABLE_INFO::default_instance_ = new TABLE_INFO();
  DATABASE_INFO::default_instance_ = new DATABASE_INFO();
  MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance_ = new MSG_RA_DC_DATABASE_INFO_GET_ACK();
  COLUMN_INFO::default_instance_->InitAsDefaultInstance();
  TABLE_INFO::default_instance_->InitAsDefaultInstance();
  DATABASE_INFO::default_instance_->InitAsDefaultInstance();
  MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto {
  StaticDescriptorInitializer_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto() {
    protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto();
  }
} static_descriptor_initializer_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* COLUMN_INFO_COLUMN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COLUMN_INFO_COLUMN_TYPE_descriptor_;
}
bool COLUMN_INFO_COLUMN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const COLUMN_INFO_COLUMN_TYPE COLUMN_INFO::STRING;
const COLUMN_INFO_COLUMN_TYPE COLUMN_INFO::INT;
const COLUMN_INFO_COLUMN_TYPE COLUMN_INFO::FLOAT;
const COLUMN_INFO_COLUMN_TYPE COLUMN_INFO::DOUBLE;
const COLUMN_INFO_COLUMN_TYPE COLUMN_INFO::COLUMN_TYPE_MIN;
const COLUMN_INFO_COLUMN_TYPE COLUMN_INFO::COLUMN_TYPE_MAX;
const int COLUMN_INFO::COLUMN_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int COLUMN_INFO::kColNameFieldNumber;
const int COLUMN_INFO::kColTypeFieldNumber;
#endif  // !_MSC_VER

COLUMN_INFO::COLUMN_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:COLUMN_INFO)
}

void COLUMN_INFO::InitAsDefaultInstance() {
}

COLUMN_INFO::COLUMN_INFO(const COLUMN_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:COLUMN_INFO)
}

void COLUMN_INFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  colname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COLUMN_INFO::~COLUMN_INFO() {
  // @@protoc_insertion_point(destructor:COLUMN_INFO)
  SharedDtor();
}

void COLUMN_INFO::SharedDtor() {
  if (colname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete colname_;
  }
  if (this != default_instance_) {
  }
}

void COLUMN_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COLUMN_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COLUMN_INFO_descriptor_;
}

const COLUMN_INFO& COLUMN_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto();
  return *default_instance_;
}

COLUMN_INFO* COLUMN_INFO::default_instance_ = NULL;

COLUMN_INFO* COLUMN_INFO::New() const {
  return new COLUMN_INFO;
}

void COLUMN_INFO::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_colname()) {
      if (colname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        colname_->clear();
      }
    }
    coltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COLUMN_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:COLUMN_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string colName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->colname().data(), this->colname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "colname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_colType;
        break;
      }

      // required .COLUMN_INFO.COLUMN_TYPE colType = 2 [default = STRING];
      case 2: {
        if (tag == 16) {
         parse_colType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::COLUMN_INFO_COLUMN_TYPE_IsValid(value)) {
            set_coltype(static_cast< ::COLUMN_INFO_COLUMN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:COLUMN_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:COLUMN_INFO)
  return false;
#undef DO_
}

void COLUMN_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:COLUMN_INFO)
  // required string colName = 1;
  if (has_colname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->colname().data(), this->colname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "colname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->colname(), output);
  }

  // required .COLUMN_INFO.COLUMN_TYPE colType = 2 [default = STRING];
  if (has_coltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:COLUMN_INFO)
}

::google::protobuf::uint8* COLUMN_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:COLUMN_INFO)
  // required string colName = 1;
  if (has_colname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->colname().data(), this->colname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "colname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->colname(), target);
  }

  // required .COLUMN_INFO.COLUMN_TYPE colType = 2 [default = STRING];
  if (has_coltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COLUMN_INFO)
  return target;
}

int COLUMN_INFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string colName = 1;
    if (has_colname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->colname());
    }

    // required .COLUMN_INFO.COLUMN_TYPE colType = 2 [default = STRING];
    if (has_coltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COLUMN_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COLUMN_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COLUMN_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COLUMN_INFO::MergeFrom(const COLUMN_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_colname()) {
      set_colname(from.colname());
    }
    if (from.has_coltype()) {
      set_coltype(from.coltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COLUMN_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COLUMN_INFO::CopyFrom(const COLUMN_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COLUMN_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void COLUMN_INFO::Swap(COLUMN_INFO* other) {
  if (other != this) {
    std::swap(colname_, other->colname_);
    std::swap(coltype_, other->coltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COLUMN_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COLUMN_INFO_descriptor_;
  metadata.reflection = COLUMN_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TABLE_INFO::kTableNameFieldNumber;
const int TABLE_INFO::kColumnDataFieldNumber;
const int TABLE_INFO::kRowNumFieldNumber;
const int TABLE_INFO::kTableSizeFieldNumber;
#endif  // !_MSC_VER

TABLE_INFO::TABLE_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TABLE_INFO)
}

void TABLE_INFO::InitAsDefaultInstance() {
}

TABLE_INFO::TABLE_INFO(const TABLE_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TABLE_INFO)
}

void TABLE_INFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rownum_ = 0u;
  tablesize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TABLE_INFO::~TABLE_INFO() {
  // @@protoc_insertion_point(destructor:TABLE_INFO)
  SharedDtor();
}

void TABLE_INFO::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void TABLE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TABLE_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TABLE_INFO_descriptor_;
}

const TABLE_INFO& TABLE_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto();
  return *default_instance_;
}

TABLE_INFO* TABLE_INFO::default_instance_ = NULL;

TABLE_INFO* TABLE_INFO::New() const {
  return new TABLE_INFO;
}

void TABLE_INFO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TABLE_INFO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(tablesize_, rownum_);
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  columndata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TABLE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TABLE_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tableName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columnData;
        break;
      }

      // repeated .COLUMN_INFO columnData = 2;
      case 2: {
        if (tag == 18) {
         parse_columnData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columndata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columnData;
        if (input->ExpectTag(24)) goto parse_rowNum;
        break;
      }

      // required uint32 rowNum = 3;
      case 3: {
        if (tag == 24) {
         parse_rowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rownum_)));
          set_has_rownum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tableSize;
        break;
      }

      // required uint64 tableSize = 4;
      case 4: {
        if (tag == 32) {
         parse_tableSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tablesize_)));
          set_has_tablesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TABLE_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TABLE_INFO)
  return false;
#undef DO_
}

void TABLE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TABLE_INFO)
  // required string tableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablename(), output);
  }

  // repeated .COLUMN_INFO columnData = 2;
  for (int i = 0; i < this->columndata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columndata(i), output);
  }

  // required uint32 rowNum = 3;
  if (has_rownum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rownum(), output);
  }

  // required uint64 tableSize = 4;
  if (has_tablesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tablesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TABLE_INFO)
}

::google::protobuf::uint8* TABLE_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TABLE_INFO)
  // required string tableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // repeated .COLUMN_INFO columnData = 2;
  for (int i = 0; i < this->columndata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columndata(i), target);
  }

  // required uint32 rowNum = 3;
  if (has_rownum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rownum(), target);
  }

  // required uint64 tableSize = 4;
  if (has_tablesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tablesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TABLE_INFO)
  return target;
}

int TABLE_INFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // required uint32 rowNum = 3;
    if (has_rownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rownum());
    }

    // required uint64 tableSize = 4;
    if (has_tablesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tablesize());
    }

  }
  // repeated .COLUMN_INFO columnData = 2;
  total_size += 1 * this->columndata_size();
  for (int i = 0; i < this->columndata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columndata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TABLE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TABLE_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TABLE_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TABLE_INFO::MergeFrom(const TABLE_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  columndata_.MergeFrom(from.columndata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_rownum()) {
      set_rownum(from.rownum());
    }
    if (from.has_tablesize()) {
      set_tablesize(from.tablesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TABLE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TABLE_INFO::CopyFrom(const TABLE_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TABLE_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columndata())) return false;
  return true;
}

void TABLE_INFO::Swap(TABLE_INFO* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    columndata_.Swap(&other->columndata_);
    std::swap(rownum_, other->rownum_);
    std::swap(tablesize_, other->tablesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TABLE_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TABLE_INFO_descriptor_;
  metadata.reflection = TABLE_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DATABASE_INFO::kDBIDFieldNumber;
const int DATABASE_INFO::kTableInfoFieldNumber;
#endif  // !_MSC_VER

DATABASE_INFO::DATABASE_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DATABASE_INFO)
}

void DATABASE_INFO::InitAsDefaultInstance() {
}

DATABASE_INFO::DATABASE_INFO(const DATABASE_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DATABASE_INFO)
}

void DATABASE_INFO::SharedCtor() {
  _cached_size_ = 0;
  dbid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DATABASE_INFO::~DATABASE_INFO() {
  // @@protoc_insertion_point(destructor:DATABASE_INFO)
  SharedDtor();
}

void DATABASE_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DATABASE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DATABASE_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DATABASE_INFO_descriptor_;
}

const DATABASE_INFO& DATABASE_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto();
  return *default_instance_;
}

DATABASE_INFO* DATABASE_INFO::default_instance_ = NULL;

DATABASE_INFO* DATABASE_INFO::New() const {
  return new DATABASE_INFO;
}

void DATABASE_INFO::Clear() {
  dbid_ = 0;
  tableinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DATABASE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DATABASE_INFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DBID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tableInfo;
        break;
      }

      // repeated .TABLE_INFO tableInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_tableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tableinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tableInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DATABASE_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DATABASE_INFO)
  return false;
#undef DO_
}

void DATABASE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DATABASE_INFO)
  // required int32 DBID = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dbid(), output);
  }

  // repeated .TABLE_INFO tableInfo = 2;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tableinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DATABASE_INFO)
}

::google::protobuf::uint8* DATABASE_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATABASE_INFO)
  // required int32 DBID = 1;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dbid(), target);
  }

  // repeated .TABLE_INFO tableInfo = 2;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tableinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATABASE_INFO)
  return target;
}

int DATABASE_INFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 DBID = 1;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbid());
    }

  }
  // repeated .TABLE_INFO tableInfo = 2;
  total_size += 1 * this->tableinfo_size();
  for (int i = 0; i < this->tableinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DATABASE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DATABASE_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DATABASE_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DATABASE_INFO::MergeFrom(const DATABASE_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  tableinfo_.MergeFrom(from.tableinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DATABASE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DATABASE_INFO::CopyFrom(const DATABASE_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATABASE_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tableinfo())) return false;
  return true;
}

void DATABASE_INFO::Swap(DATABASE_INFO* other) {
  if (other != this) {
    std::swap(dbid_, other->dbid_);
    tableinfo_.Swap(&other->tableinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DATABASE_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DATABASE_INFO_descriptor_;
  metadata.reflection = DATABASE_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_RA_DC_DATABASE_INFO_GET_ACK::kStatusCodeFieldNumber;
const int MSG_RA_DC_DATABASE_INFO_GET_ACK::kStatusMsgFieldNumber;
const int MSG_RA_DC_DATABASE_INFO_GET_ACK::kDbInfoFieldNumber;
#endif  // !_MSC_VER

MSG_RA_DC_DATABASE_INFO_GET_ACK::MSG_RA_DC_DATABASE_INFO_GET_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG_RA_DC_DATABASE_INFO_GET_ACK)
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::InitAsDefaultInstance() {
}

MSG_RA_DC_DATABASE_INFO_GET_ACK::MSG_RA_DC_DATABASE_INFO_GET_ACK(const MSG_RA_DC_DATABASE_INFO_GET_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSG_RA_DC_DATABASE_INFO_GET_ACK)
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscode_ = 0;
  statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_RA_DC_DATABASE_INFO_GET_ACK::~MSG_RA_DC_DATABASE_INFO_GET_ACK() {
  // @@protoc_insertion_point(destructor:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  SharedDtor();
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::SharedDtor() {
  if (statusmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statusmsg_;
  }
  if (this != default_instance_) {
  }
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_RA_DC_DATABASE_INFO_GET_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_RA_DC_DATABASE_INFO_GET_ACK_descriptor_;
}

const MSG_RA_DC_DATABASE_INFO_GET_ACK& MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDC_5fRA_5fDATABASE_5fINFO_5fGET_2eproto();
  return *default_instance_;
}

MSG_RA_DC_DATABASE_INFO_GET_ACK* MSG_RA_DC_DATABASE_INFO_GET_ACK::default_instance_ = NULL;

MSG_RA_DC_DATABASE_INFO_GET_ACK* MSG_RA_DC_DATABASE_INFO_GET_ACK::New() const {
  return new MSG_RA_DC_DATABASE_INFO_GET_ACK;
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    statuscode_ = 0;
    if (has_statusmsg()) {
      if (statusmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statusmsg_->clear();
      }
    }
  }
  dbinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_RA_DC_DATABASE_INFO_GET_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 statusCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statusMsg;
        break;
      }

      // required string statusMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_statusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statusmsg().data(), this->statusmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statusmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbInfo;
        break;
      }

      // repeated .DATABASE_INFO dbInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_dbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dbInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  return false;
#undef DO_
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // required string statusMsg = 2;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statusmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->statusmsg(), output);
  }

  // repeated .DATABASE_INFO dbInfo = 3;
  for (int i = 0; i < this->dbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dbinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSG_RA_DC_DATABASE_INFO_GET_ACK)
}

::google::protobuf::uint8* MSG_RA_DC_DATABASE_INFO_GET_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  // required int32 statusCode = 1;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // required string statusMsg = 2;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statusmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->statusmsg(), target);
  }

  // repeated .DATABASE_INFO dbInfo = 3;
  for (int i = 0; i < this->dbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dbinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG_RA_DC_DATABASE_INFO_GET_ACK)
  return target;
}

int MSG_RA_DC_DATABASE_INFO_GET_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

    // required string statusMsg = 2;
    if (has_statusmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statusmsg());
    }

  }
  // repeated .DATABASE_INFO dbInfo = 3;
  total_size += 1 * this->dbinfo_size();
  for (int i = 0; i < this->dbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_RA_DC_DATABASE_INFO_GET_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_RA_DC_DATABASE_INFO_GET_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::MergeFrom(const MSG_RA_DC_DATABASE_INFO_GET_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbinfo_.MergeFrom(from.dbinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
    if (from.has_statusmsg()) {
      set_statusmsg(from.statusmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::CopyFrom(const MSG_RA_DC_DATABASE_INFO_GET_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RA_DC_DATABASE_INFO_GET_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dbinfo())) return false;
  return true;
}

void MSG_RA_DC_DATABASE_INFO_GET_ACK::Swap(MSG_RA_DC_DATABASE_INFO_GET_ACK* other) {
  if (other != this) {
    std::swap(statuscode_, other->statuscode_);
    std::swap(statusmsg_, other->statusmsg_);
    dbinfo_.Swap(&other->dbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_RA_DC_DATABASE_INFO_GET_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_RA_DC_DATABASE_INFO_GET_ACK_descriptor_;
  metadata.reflection = MSG_RA_DC_DATABASE_INFO_GET_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
