// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSG_DS_DC_ROW_INDEX_SEND.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSG_DS_DC_ROW_INDEX_SEND.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ROW_INDEX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROW_INDEX_reflection_ = NULL;
const ::google::protobuf::Descriptor* TABLE_INDEX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TABLE_INDEX_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DS_DC_ROW_INDEX_SEND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DS_DC_ROW_INDEX_SEND_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSG_DC_DS_ROW_INDEX_SEND_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSG_DC_DS_ROW_INDEX_SEND_ACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto() {
  protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSG_DS_DC_ROW_INDEX_SEND.proto");
  GOOGLE_CHECK(file != NULL);
  ROW_INDEX_descriptor_ = file->message_type(0);
  static const int ROW_INDEX_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROW_INDEX, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROW_INDEX, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROW_INDEX, csip_),
  };
  ROW_INDEX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROW_INDEX_descriptor_,
      ROW_INDEX::default_instance_,
      ROW_INDEX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROW_INDEX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROW_INDEX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROW_INDEX));
  TABLE_INDEX_descriptor_ = file->message_type(1);
  static const int TABLE_INDEX_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INDEX, raip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INDEX, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INDEX, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INDEX, rowindex_),
  };
  TABLE_INDEX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TABLE_INDEX_descriptor_,
      TABLE_INDEX::default_instance_,
      TABLE_INDEX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INDEX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TABLE_INDEX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TABLE_INDEX));
  MSG_DS_DC_ROW_INDEX_SEND_descriptor_ = file->message_type(2);
  static const int MSG_DS_DC_ROW_INDEX_SEND_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_DC_ROW_INDEX_SEND, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_DC_ROW_INDEX_SEND, loadtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_DC_ROW_INDEX_SEND, tableindex_),
  };
  MSG_DS_DC_ROW_INDEX_SEND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DS_DC_ROW_INDEX_SEND_descriptor_,
      MSG_DS_DC_ROW_INDEX_SEND::default_instance_,
      MSG_DS_DC_ROW_INDEX_SEND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_DC_ROW_INDEX_SEND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DS_DC_ROW_INDEX_SEND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DS_DC_ROW_INDEX_SEND));
  MSG_DC_DS_ROW_INDEX_SEND_ACK_descriptor_ = file->message_type(3);
  static const int MSG_DC_DS_ROW_INDEX_SEND_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_DS_ROW_INDEX_SEND_ACK, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_DS_ROW_INDEX_SEND_ACK, loadtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_DS_ROW_INDEX_SEND_ACK, statuscode_),
  };
  MSG_DC_DS_ROW_INDEX_SEND_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSG_DC_DS_ROW_INDEX_SEND_ACK_descriptor_,
      MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance_,
      MSG_DC_DS_ROW_INDEX_SEND_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_DS_ROW_INDEX_SEND_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSG_DC_DS_ROW_INDEX_SEND_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSG_DC_DS_ROW_INDEX_SEND_ACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROW_INDEX_descriptor_, &ROW_INDEX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TABLE_INDEX_descriptor_, &TABLE_INDEX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DS_DC_ROW_INDEX_SEND_descriptor_, &MSG_DS_DC_ROW_INDEX_SEND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSG_DC_DS_ROW_INDEX_SEND_ACK_descriptor_, &MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto() {
  delete ROW_INDEX::default_instance_;
  delete ROW_INDEX_reflection_;
  delete TABLE_INDEX::default_instance_;
  delete TABLE_INDEX_reflection_;
  delete MSG_DS_DC_ROW_INDEX_SEND::default_instance_;
  delete MSG_DS_DC_ROW_INDEX_SEND_reflection_;
  delete MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance_;
  delete MSG_DC_DS_ROW_INDEX_SEND_ACK_reflection_;
}

void protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036MSG_DS_DC_ROW_INDEX_SEND.proto\"5\n\tROW_"
    "INDEX\022\r\n\005start\030\001 \002(\r\022\013\n\003end\030\002 \002(\r\022\014\n\004csi"
    "p\030\003 \002(\t\"Z\n\013TABLE_INDEX\022\014\n\004raip\030\001 \002(\t\022\014\n\004"
    "dbid\030\002 \002(\005\022\021\n\ttableName\030\003 \002(\t\022\034\n\010RowInde"
    "x\030\004 \003(\0132\n.ROW_INDEX\"`\n\030MSG_DS_DC_ROW_IND"
    "EX_SEND\022\016\n\006taskID\030\001 \002(\r\022\022\n\nloadTaskID\030\002 "
    "\002(\r\022 \n\nTableIndex\030\003 \003(\0132\014.TABLE_INDEX\"V\n"
    "\034MSG_DC_DS_ROW_INDEX_SEND_ACK\022\016\n\006taskID\030"
    "\001 \002(\r\022\022\n\nloadTaskID\030\002 \002(\r\022\022\n\nstatusCode\030"
    "\003 \002(\005", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSG_DS_DC_ROW_INDEX_SEND.proto", &protobuf_RegisterTypes);
  ROW_INDEX::default_instance_ = new ROW_INDEX();
  TABLE_INDEX::default_instance_ = new TABLE_INDEX();
  MSG_DS_DC_ROW_INDEX_SEND::default_instance_ = new MSG_DS_DC_ROW_INDEX_SEND();
  MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance_ = new MSG_DC_DS_ROW_INDEX_SEND_ACK();
  ROW_INDEX::default_instance_->InitAsDefaultInstance();
  TABLE_INDEX::default_instance_->InitAsDefaultInstance();
  MSG_DS_DC_ROW_INDEX_SEND::default_instance_->InitAsDefaultInstance();
  MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto {
  StaticDescriptorInitializer_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto() {
    protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  }
} static_descriptor_initializer_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ROW_INDEX::kStartFieldNumber;
const int ROW_INDEX::kEndFieldNumber;
const int ROW_INDEX::kCsipFieldNumber;
#endif  // !_MSC_VER

ROW_INDEX::ROW_INDEX()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROW_INDEX)
}

void ROW_INDEX::InitAsDefaultInstance() {
}

ROW_INDEX::ROW_INDEX(const ROW_INDEX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ROW_INDEX)
}

void ROW_INDEX::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_ = 0u;
  end_ = 0u;
  csip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROW_INDEX::~ROW_INDEX() {
  // @@protoc_insertion_point(destructor:ROW_INDEX)
  SharedDtor();
}

void ROW_INDEX::SharedDtor() {
  if (csip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csip_;
  }
  if (this != default_instance_) {
  }
}

void ROW_INDEX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROW_INDEX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROW_INDEX_descriptor_;
}

const ROW_INDEX& ROW_INDEX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  return *default_instance_;
}

ROW_INDEX* ROW_INDEX::default_instance_ = NULL;

ROW_INDEX* ROW_INDEX::New() const {
  return new ROW_INDEX;
}

void ROW_INDEX::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ROW_INDEX*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_, end_);
    if (has_csip()) {
      if (csip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        csip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROW_INDEX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ROW_INDEX)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required uint32 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_csip;
        break;
      }

      // required string csip = 3;
      case 3: {
        if (tag == 26) {
         parse_csip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_csip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->csip().data(), this->csip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "csip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ROW_INDEX)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ROW_INDEX)
  return false;
#undef DO_
}

void ROW_INDEX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ROW_INDEX)
  // required uint32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start(), output);
  }

  // required uint32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end(), output);
  }

  // required string csip = 3;
  if (has_csip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->csip().data(), this->csip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "csip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->csip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ROW_INDEX)
}

::google::protobuf::uint8* ROW_INDEX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROW_INDEX)
  // required uint32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start(), target);
  }

  // required uint32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end(), target);
  }

  // required string csip = 3;
  if (has_csip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->csip().data(), this->csip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "csip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->csip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROW_INDEX)
  return target;
}

int ROW_INDEX::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // required uint32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

    // required string csip = 3;
    if (has_csip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->csip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROW_INDEX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROW_INDEX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROW_INDEX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROW_INDEX::MergeFrom(const ROW_INDEX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_csip()) {
      set_csip(from.csip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROW_INDEX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROW_INDEX::CopyFrom(const ROW_INDEX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROW_INDEX::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ROW_INDEX::Swap(ROW_INDEX* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(csip_, other->csip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROW_INDEX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROW_INDEX_descriptor_;
  metadata.reflection = ROW_INDEX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TABLE_INDEX::kRaipFieldNumber;
const int TABLE_INDEX::kDbidFieldNumber;
const int TABLE_INDEX::kTableNameFieldNumber;
const int TABLE_INDEX::kRowIndexFieldNumber;
#endif  // !_MSC_VER

TABLE_INDEX::TABLE_INDEX()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TABLE_INDEX)
}

void TABLE_INDEX::InitAsDefaultInstance() {
}

TABLE_INDEX::TABLE_INDEX(const TABLE_INDEX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TABLE_INDEX)
}

void TABLE_INDEX::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dbid_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TABLE_INDEX::~TABLE_INDEX() {
  // @@protoc_insertion_point(destructor:TABLE_INDEX)
  SharedDtor();
}

void TABLE_INDEX::SharedDtor() {
  if (raip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raip_;
  }
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void TABLE_INDEX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TABLE_INDEX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TABLE_INDEX_descriptor_;
}

const TABLE_INDEX& TABLE_INDEX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  return *default_instance_;
}

TABLE_INDEX* TABLE_INDEX::default_instance_ = NULL;

TABLE_INDEX* TABLE_INDEX::New() const {
  return new TABLE_INDEX;
}

void TABLE_INDEX::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_raip()) {
      if (raip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raip_->clear();
      }
    }
    dbid_ = 0;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
  }
  rowindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TABLE_INDEX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TABLE_INDEX)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string raip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->raip().data(), this->raip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbid;
        break;
      }

      // required int32 dbid = 2;
      case 2: {
        if (tag == 16) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tableName;
        break;
      }

      // required string tableName = 3;
      case 3: {
        if (tag == 26) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RowIndex;
        break;
      }

      // repeated .ROW_INDEX RowIndex = 4;
      case 4: {
        if (tag == 34) {
         parse_RowIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rowindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RowIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TABLE_INDEX)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TABLE_INDEX)
  return false;
#undef DO_
}

void TABLE_INDEX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TABLE_INDEX)
  // required string raip = 1;
  if (has_raip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raip().data(), this->raip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->raip(), output);
  }

  // required int32 dbid = 2;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dbid(), output);
  }

  // required string tableName = 3;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tablename(), output);
  }

  // repeated .ROW_INDEX RowIndex = 4;
  for (int i = 0; i < this->rowindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rowindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TABLE_INDEX)
}

::google::protobuf::uint8* TABLE_INDEX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TABLE_INDEX)
  // required string raip = 1;
  if (has_raip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->raip().data(), this->raip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->raip(), target);
  }

  // required int32 dbid = 2;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dbid(), target);
  }

  // required string tableName = 3;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tablename(), target);
  }

  // repeated .ROW_INDEX RowIndex = 4;
  for (int i = 0; i < this->rowindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rowindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TABLE_INDEX)
  return target;
}

int TABLE_INDEX::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string raip = 1;
    if (has_raip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raip());
    }

    // required int32 dbid = 2;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbid());
    }

    // required string tableName = 3;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

  }
  // repeated .ROW_INDEX RowIndex = 4;
  total_size += 1 * this->rowindex_size();
  for (int i = 0; i < this->rowindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rowindex(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TABLE_INDEX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TABLE_INDEX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TABLE_INDEX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TABLE_INDEX::MergeFrom(const TABLE_INDEX& from) {
  GOOGLE_CHECK_NE(&from, this);
  rowindex_.MergeFrom(from.rowindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raip()) {
      set_raip(from.raip());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TABLE_INDEX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TABLE_INDEX::CopyFrom(const TABLE_INDEX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TABLE_INDEX::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rowindex())) return false;
  return true;
}

void TABLE_INDEX::Swap(TABLE_INDEX* other) {
  if (other != this) {
    std::swap(raip_, other->raip_);
    std::swap(dbid_, other->dbid_);
    std::swap(tablename_, other->tablename_);
    rowindex_.Swap(&other->rowindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TABLE_INDEX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TABLE_INDEX_descriptor_;
  metadata.reflection = TABLE_INDEX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DS_DC_ROW_INDEX_SEND::kTaskIDFieldNumber;
const int MSG_DS_DC_ROW_INDEX_SEND::kLoadTaskIDFieldNumber;
const int MSG_DS_DC_ROW_INDEX_SEND::kTableIndexFieldNumber;
#endif  // !_MSC_VER

MSG_DS_DC_ROW_INDEX_SEND::MSG_DS_DC_ROW_INDEX_SEND()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG_DS_DC_ROW_INDEX_SEND)
}

void MSG_DS_DC_ROW_INDEX_SEND::InitAsDefaultInstance() {
}

MSG_DS_DC_ROW_INDEX_SEND::MSG_DS_DC_ROW_INDEX_SEND(const MSG_DS_DC_ROW_INDEX_SEND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSG_DS_DC_ROW_INDEX_SEND)
}

void MSG_DS_DC_ROW_INDEX_SEND::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  loadtaskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DS_DC_ROW_INDEX_SEND::~MSG_DS_DC_ROW_INDEX_SEND() {
  // @@protoc_insertion_point(destructor:MSG_DS_DC_ROW_INDEX_SEND)
  SharedDtor();
}

void MSG_DS_DC_ROW_INDEX_SEND::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DS_DC_ROW_INDEX_SEND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DS_DC_ROW_INDEX_SEND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DS_DC_ROW_INDEX_SEND_descriptor_;
}

const MSG_DS_DC_ROW_INDEX_SEND& MSG_DS_DC_ROW_INDEX_SEND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  return *default_instance_;
}

MSG_DS_DC_ROW_INDEX_SEND* MSG_DS_DC_ROW_INDEX_SEND::default_instance_ = NULL;

MSG_DS_DC_ROW_INDEX_SEND* MSG_DS_DC_ROW_INDEX_SEND::New() const {
  return new MSG_DS_DC_ROW_INDEX_SEND;
}

void MSG_DS_DC_ROW_INDEX_SEND::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DS_DC_ROW_INDEX_SEND*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, loadtaskid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tableindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DS_DC_ROW_INDEX_SEND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSG_DS_DC_ROW_INDEX_SEND)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_loadTaskID;
        break;
      }

      // required uint32 loadTaskID = 2;
      case 2: {
        if (tag == 16) {
         parse_loadTaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loadtaskid_)));
          set_has_loadtaskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TableIndex;
        break;
      }

      // repeated .TABLE_INDEX TableIndex = 3;
      case 3: {
        if (tag == 26) {
         parse_TableIndex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tableindex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TableIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSG_DS_DC_ROW_INDEX_SEND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSG_DS_DC_ROW_INDEX_SEND)
  return false;
#undef DO_
}

void MSG_DS_DC_ROW_INDEX_SEND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSG_DS_DC_ROW_INDEX_SEND)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 loadTaskID = 2;
  if (has_loadtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->loadtaskid(), output);
  }

  // repeated .TABLE_INDEX TableIndex = 3;
  for (int i = 0; i < this->tableindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tableindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSG_DS_DC_ROW_INDEX_SEND)
}

::google::protobuf::uint8* MSG_DS_DC_ROW_INDEX_SEND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG_DS_DC_ROW_INDEX_SEND)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required uint32 loadTaskID = 2;
  if (has_loadtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->loadtaskid(), target);
  }

  // repeated .TABLE_INDEX TableIndex = 3;
  for (int i = 0; i < this->tableindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tableindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG_DS_DC_ROW_INDEX_SEND)
  return target;
}

int MSG_DS_DC_ROW_INDEX_SEND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 loadTaskID = 2;
    if (has_loadtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loadtaskid());
    }

  }
  // repeated .TABLE_INDEX TableIndex = 3;
  total_size += 1 * this->tableindex_size();
  for (int i = 0; i < this->tableindex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableindex(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DS_DC_ROW_INDEX_SEND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DS_DC_ROW_INDEX_SEND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DS_DC_ROW_INDEX_SEND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DS_DC_ROW_INDEX_SEND::MergeFrom(const MSG_DS_DC_ROW_INDEX_SEND& from) {
  GOOGLE_CHECK_NE(&from, this);
  tableindex_.MergeFrom(from.tableindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_loadtaskid()) {
      set_loadtaskid(from.loadtaskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DS_DC_ROW_INDEX_SEND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DS_DC_ROW_INDEX_SEND::CopyFrom(const MSG_DS_DC_ROW_INDEX_SEND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DS_DC_ROW_INDEX_SEND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tableindex())) return false;
  return true;
}

void MSG_DS_DC_ROW_INDEX_SEND::Swap(MSG_DS_DC_ROW_INDEX_SEND* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(loadtaskid_, other->loadtaskid_);
    tableindex_.Swap(&other->tableindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DS_DC_ROW_INDEX_SEND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DS_DC_ROW_INDEX_SEND_descriptor_;
  metadata.reflection = MSG_DS_DC_ROW_INDEX_SEND_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSG_DC_DS_ROW_INDEX_SEND_ACK::kTaskIDFieldNumber;
const int MSG_DC_DS_ROW_INDEX_SEND_ACK::kLoadTaskIDFieldNumber;
const int MSG_DC_DS_ROW_INDEX_SEND_ACK::kStatusCodeFieldNumber;
#endif  // !_MSC_VER

MSG_DC_DS_ROW_INDEX_SEND_ACK::MSG_DC_DS_ROW_INDEX_SEND_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSG_DC_DS_ROW_INDEX_SEND_ACK)
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::InitAsDefaultInstance() {
}

MSG_DC_DS_ROW_INDEX_SEND_ACK::MSG_DC_DS_ROW_INDEX_SEND_ACK(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSG_DC_DS_ROW_INDEX_SEND_ACK)
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  loadtaskid_ = 0u;
  statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSG_DC_DS_ROW_INDEX_SEND_ACK::~MSG_DC_DS_ROW_INDEX_SEND_ACK() {
  // @@protoc_insertion_point(destructor:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  SharedDtor();
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSG_DC_DS_ROW_INDEX_SEND_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_DC_DS_ROW_INDEX_SEND_ACK_descriptor_;
}

const MSG_DC_DS_ROW_INDEX_SEND_ACK& MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSG_5fDS_5fDC_5fROW_5fINDEX_5fSEND_2eproto();
  return *default_instance_;
}

MSG_DC_DS_ROW_INDEX_SEND_ACK* MSG_DC_DS_ROW_INDEX_SEND_ACK::default_instance_ = NULL;

MSG_DC_DS_ROW_INDEX_SEND_ACK* MSG_DC_DS_ROW_INDEX_SEND_ACK::New() const {
  return new MSG_DC_DS_ROW_INDEX_SEND_ACK;
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MSG_DC_DS_ROW_INDEX_SEND_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, statuscode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSG_DC_DS_ROW_INDEX_SEND_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_loadTaskID;
        break;
      }

      // required uint32 loadTaskID = 2;
      case 2: {
        if (tag == 16) {
         parse_loadTaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loadtaskid_)));
          set_has_loadtaskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_statusCode;
        break;
      }

      // required int32 statusCode = 3;
      case 3: {
        if (tag == 24) {
         parse_statusCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
          set_has_statuscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  return false;
#undef DO_
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 loadTaskID = 2;
  if (has_loadtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->loadtaskid(), output);
  }

  // required int32 statusCode = 3;
  if (has_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->statuscode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSG_DC_DS_ROW_INDEX_SEND_ACK)
}

::google::protobuf::uint8* MSG_DC_DS_ROW_INDEX_SEND_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  // required uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required uint32 loadTaskID = 2;
  if (has_loadtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->loadtaskid(), target);
  }

  // required int32 statusCode = 3;
  if (has_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->statuscode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSG_DC_DS_ROW_INDEX_SEND_ACK)
  return target;
}

int MSG_DC_DS_ROW_INDEX_SEND_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 loadTaskID = 2;
    if (has_loadtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loadtaskid());
    }

    // required int32 statusCode = 3;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSG_DC_DS_ROW_INDEX_SEND_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSG_DC_DS_ROW_INDEX_SEND_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::MergeFrom(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_loadtaskid()) {
      set_loadtaskid(from.loadtaskid());
    }
    if (from.has_statuscode()) {
      set_statuscode(from.statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::CopyFrom(const MSG_DC_DS_ROW_INDEX_SEND_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DC_DS_ROW_INDEX_SEND_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MSG_DC_DS_ROW_INDEX_SEND_ACK::Swap(MSG_DC_DS_ROW_INDEX_SEND_ACK* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(loadtaskid_, other->loadtaskid_);
    std::swap(statuscode_, other->statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSG_DC_DS_ROW_INDEX_SEND_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSG_DC_DS_ROW_INDEX_SEND_ACK_descriptor_;
  metadata.reflection = MSG_DC_DS_ROW_INDEX_SEND_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
